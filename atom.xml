<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iOS App]]></title>
  <link href="http://xuguoxing.github.io/atom.xml" rel="self"/>
  <link href="http://xuguoxing.github.io/"/>
  <updated>2015-05-02T08:13:26+08:00</updated>
  <id>http://xuguoxing.github.io/</id>
  <author>
    <name><![CDATA[xuguoxing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sentence]]></title>
    <link href="http://xuguoxing.github.io/blog/2015/05/01/sentence/"/>
    <updated>2015-05-01T12:10:52+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2015/05/01/sentence</id>
    <content type="html"><![CDATA[<ul>
<li>Some will tackle questions head on, while others will dodge them entirely. 有些人会直面问题，而有些人则会完全的闪避问题。</li>
<li>Only the paranoid survive. 只有偏执狂才能生存</li>
<li>The greater fool is someone with the perfect blend of self-delusion and ego to think that he can succeed where others have failed. 大傻瓜身上完美的融合了自欺与自负，他自认为能在他人失败之处获得成功。</li>
<li>Don&rsquo;t tamper with my business. 别干预我的事。</li>
<li>A stumble may prevent a fall. 小疾防大病</li>
<li>What stumble you? 什么让你这么犹豫不决？</li>
<li>The invaders brazened their way into our motherland. 侵略者肆无忌惮地闯入了我们的祖国。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vocabulary]]></title>
    <link href="http://xuguoxing.github.io/blog/2015/04/18/vocabulary/"/>
    <updated>2015-04-18T14:48:43+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2015/04/18/vocabulary</id>
    <content type="html"><![CDATA[<h1>人</h1>

<h2>称呼</h2>

<ul>
<li>pedestrian: 行人；平庸乏味的(不满)；徒步的，步行的

<ul>
<li>pedestrian crossing:人行横道；</li>
<li>pedestrian street 步行街</li>
</ul>
</li>
<li>colleague: 同事</li>
<li>elite:精英、杰出人物、佼佼者(复式)；精兵、精锐部队（总称）；掌权人物、上层人士（总称）；精英的</li>
<li>roamer: 漫游者；流浪者；漂泊者</li>
<li>civil: 民众的；民用的；民政的；民事的；社会的，国内的；公民的，市民的；民间的、文职的(与军人、圣职相区别)

<ul>
<li>civil servant: 公务员</li>
<li>civil law 民法</li>
<li>civil aviation 民用航空</li>
</ul>
</li>
<li>citizen:公民、国民；市民、城镇居民；

<ul>
<li>second-class citizen 次等公民</li>
<li>senior citizen 老年人</li>
<li>fellow citizen 各位公民，同胞</li>
</ul>
</li>
<li>tripper: 旅行者</li>
<li>excursionist 远足者</li>
<li>sightseer 观光客，游客</li>
<li>rubberneck:  伸长脖子观看、观光者、游览者、好事者</li>
<li>backpacker: 背包客</li>
<li>aviator: 飞行员</li>
<li>pilot: 飞行员；领航员；舵手；驾驶(飞机)，为(船只)领航;带领、引导

<ul>
<li>pilot project 试点项目；样板工程</li>
</ul>
</li>
<li>co-pilot :副驾驶</li>
<li>vandal: 故意破坏者(公共财产、文化艺术), (汪达尔人,日耳曼人的一支，曾攻占罗马肆意坡口)</li>
<li>mob: 暴民，乱民，犯罪团伙；围攻</li>
<li>mobster:暴徒</li>
<li>thug: 暴徒，恶棍，凶手，刺客;</li>
<li>punk: 朋克；小流氓</li>
<li>rogue: 流氓，无赖；捣蛋鬼（情感，喜欢）；行为异常的；劣种（农业）</li>
<li>gangster:(结成团伙的)匪徒；</li>
<li>clown: 小丑；滑稽的人、好说笑话的人、言行轻率的人、不足取信的人；粗鲁的人、乡巴佬、农民、庄稼汉</li>
<li>buffoon: (马戏、喜剧等)小丑，丑角；滑稽的人、爱讲粗俗笑话的人；粗俗而愚笨的人、缺乏教养的人；讲粗俗笑话、开下流玩笑；插科打诨</li>
<li>prostitute: 妓女；使沦为娼妓；出卖名誉、为钱而堕落(贪钱粗制滥造作品)；</li>
<li>hottie: 性感的人，惹火女孩，可人儿，可爱的少女</li>
<li>pessimist: 悲观主义者</li>
<li>cynic:愤世嫉俗者；犬儒学派的人</li>
<li>scavenger:捡垃圾者、拾破烂者；清洁工、清道夫；食腐动物、食菌植物；

<ul>
<li>scavenger hunts:拾荒式搜索：比如寻宝游戏（参加者在规定时间内寻找指定的物品，以先找到者为胜）</li>
</ul>
</li>
<li>spartan: 斯巴达人；勇士；斯巴达的、（生活方式）简朴的、清苦的</li>
<li>dean:(大学的)学院院长、系主任；教长（教堂）

<ul>
<li>academic dean:教务长</li>
<li>assistant dean:副院长</li>
<li>associate dean:副院长</li>
</ul>
</li>
<li>barista:咖啡师；</li>
<li>whippersnapper:傲慢的家伙；妄自尊大的人</li>
<li>infancy:婴儿期；初期；婴儿(总称)</li>
<li>mole:痣；鼹鼠；（政府或机构中的）间谍、长期潜伏的间谍、在暗处工作的人；</li>
<li>pirate:海盗；盗版(CD、DVD、书籍、计算机程序等)；非法复制

<ul>
<li>pirate game:海盗游戏</li>
<li>pirate bay:海盗湾</li>
<li>pirate software:盗版软件</li>
</ul>
</li>
<li>lackey:(穿制服的)男仆、仆人、跟班；走狗、马屁精、谄媚者、卑躬屈膝者；伺候、服侍、巴结</li>
<li>clerk:文书、（法庭）书记员；(酒店、办公室、医院等的)接待员；售货员

<ul>
<li>sales clerk: 售货员</li>
<li>office clerk: 办公室职员</li>
<li>accouting clerk:记账员</li>
<li>bank clerk:银行办事人员</li>
<li>desk clert:接待员</li>
</ul>
</li>
<li>overlord:霸王、大君主、最高统治者、封建领主</li>
<li>janitor:看门人、守卫；门警；清洁工</li>
<li>cripple:残疾人、跛子、瘸子；残缺的东西、有缺陷的事物；使受伤致残、受损、丧失活动能力；消弱</li>
<li>acolyte:助手、帮手；随从、侍从；追随者；教士助手、低级神职人员；卫星</li>
<li>cavalier:骑士、武士、豪侠；对女人献殷勤、有礼貌的绅士、（尤指）贵妇人的护送着；傲慢的、目空一切的、漫不经心的；自由自在的、快活的、磊落豪爽的</li>
</ul>


<h2>人群</h2>

<ul>
<li>roster:执勤表；花名册、名单;

<ul>
<li>duty roster:执勤表、轮值表</li>
</ul>
</li>
</ul>


<h2>情感</h2>

<h3>焦虑、不安</h3>

<ul>
<li>disquiet: 使..不安，担忧</li>
<li>discompose: 使&hellip;心神不宁</li>
<li>disconcert: 使..窘迫、尴尬</li>
<li>concern: 担忧,关心</li>
<li>anxiety:  焦虑</li>
<li>worry: 担心、烦恼</li>
<li>worrisome: 令人担心的；使人烦恼的、使人焦虑的；容易烦恼的</li>
<li>fear:害怕、担忧</li>
<li>jumpy:坐立不安的、提心吊胆的；神经质的；跳动的</li>
</ul>


<h3>恐慌、失望</h3>

<ul>
<li>dismay: 恐慌、胆怯、失望(因突然的危险)</li>
<li>alarm: 惊恐</li>
<li>dispirit: 使…沮丧</li>
<li>depress:沮丧、情绪低落、下跌</li>
<li>disappointment: 失望</li>
<li>horrify: 恐惧、惊骇、极度厌恶(horror)</li>
<li>terrify: 使..害怕 (terror)</li>
<li>terrific:极好的、了不起的；极大的、非常的、极度的；可怕的、可怖的、骇人的、令人生畏的</li>
</ul>


<h3>愤怒</h3>

<ul>
<li>ire: 愤怒、使..发怒</li>
<li>irritate: 激怒、刺激</li>
<li>indignation:愤慨、愤怒不平</li>
<li>fierce:野性的、凶猛的、狂怒的；猛烈的、狂暴的、激烈(行动)；热切的、热烈的、狂热的、下定决心的(感觉)

<ul>
<li>fierce stare:生气时瞪着眼睛</li>
<li>fierce competititon:激烈的竞争</li>
</ul>
</li>
<li>take pepper in the nose/grow pepper:发怒、发脾气、勃然大怒</li>
</ul>


<h3>爱好、痴迷</h3>

<ul>
<li>enthusiast: 热情、热心者；热衷于..的人;爱好者；入迷、狂热者；忠于(原则、事业、信仰等)的人</li>
<li>intoxicate: 使醉酒、麻醉；使陶醉、沉醉、狂喜；使中毒</li>
<li>intoxicant: 醉人的，可致醉的；令人陶醉的；可使中毒的，麻醉的</li>
<li>obsession: 迷恋、痴迷；困扰；被迷住(困扰、烦扰)的状态；烦扰人的情绪(或思想、充电)；强迫观念(心理学)</li>
<li>indulge:沉溺、使沉溺；纵容；

<ul>
<li>indulge oneself:恣纵己意</li>
<li>indulge games:沉溺有限</li>
</ul>
</li>
</ul>


<h2>爱情、婚姻、性</h2>

<ul>
<li>prostitute: 妓女；使沦为娼妓；出卖名誉、为钱而堕落(贪钱粗制滥造作品)；</li>
<li>engagement: 约会；订婚约定；订婚时期；约束、约定（诺言、许诺、承诺、契约、婚约、受聘）；交战、遭遇战(军事)；需偿付的债务（商业） （break an * engagement 违约 meet one’s engagements 偿还债务；履行(契约等)义务）</li>
<li>proposal: 提案、提议(正式书面的)；求婚；推荐、申请

<ul>
<li>agreen to a proposal 同意某项建议(提案)</li>
<li>make a proposal (of marriage) 求婚</li>
<li>make(offer) proposal of(for) 向…求婚</li>
<li>design proposal 设计方案）</li>
</ul>
</li>
</ul>


<h2>思想、性格</h2>

<h3>性格</h3>

<ul>
<li>vigorous: 体力的(劳动)；用力的；精力充沛的(人);强有力的(运动、活动)</li>
<li>sour: 酸的；馊的；脾气坏的、不友好的；

<ul>
<li>be sour on :讨厌，厌恶</li>
<li>go（turn） sour: 发酸、变酸；（建议等）不受欢迎；（计划等）出了毛病；对&hellip;失去信心(或不报希望)</li>
<li>sour as vinegar:极酸，说话尖刻、脾气暴躁</li>
</ul>
</li>
<li>hasty:匆忙的、草率的</li>
<li>pasty:苍白的；馅饼</li>
<li>nasty:下流的、肮脏的；可恶的（事物、人或行为）；

<ul>
<li>nasty smell:恶心的气味</li>
</ul>
</li>
<li>benevolent:仁慈的、善心的、善意的；</li>
<li>brazen:黄铜的、黄铜制的；（颜色、强度等）似黄铜的、黄铜色的；厚脸皮的、厚颜无耻的、肆无忌惮的、无所顾忌的；厚着脸皮干、肆无忌惮地干、使变得无耻、无耻的对待

<ul>
<li>brazen it out:(虽已做错仍)厚着脸皮硬挺、干下去，装作没有做错似的，不觉羞愧的对待</li>
</ul>
</li>
<li>brutal:残暴的、凶猛的、残忍的、粗鲁的、冷酷无情的；不留情面的(诚实、直白);非常严厉的；（气候）严酷的、冷人难受的、难以忍受的；苛刻的

<ul>
<li>brutal violence:暴力</li>
</ul>
</li>
</ul>


<h3>想象</h3>

<ul>
<li>fancy :别致，阔气(不喜欢)；认为(自己)，(自)认为是(实际并不是)，以为，猜想；想象，错觉，幻觉；想要，喜欢；</li>
<li>fantasy: 幻想(的美好事物),虚幻的故事，幻想(活动)</li>
<li>illusion: 幻想(错误的)、假象、幻觉</li>
<li>hallucination:幻觉（生病或者毒品引发）</li>
<li>delusion:错觉，妄想 (self-delusion:自我欺骗，自欺，自欺欺人，自我错觉)</li>
</ul>


<h3>渴望、立志、野心、大胆、无畏</h3>

<ul>
<li>aspire:  有志(于); 渴望、追求(aspire to/for/after)

<ul>
<li>aspiring: 有志向的；有雄心的，努力向上的；</li>
</ul>
</li>
<li>ambition: 理想；雄心、抱负、志向（对名利）；具体的(追求目标)；野心</li>
<li>audacious: 大胆的、勇敢的、无畏的、用于冒险的；冒失的、放肆的、荣莽的；厚颜无耻的，胆大妄为的；大胆创新的、标新立异的</li>
<li>outrageous: 不可接受的、令人震惊的(强调)；蛮横的，残暴的；无耻的、无道德的、极端无礼的；肆无忌惮的、毫无节制的。

<ul>
<li>outrageous fortune: 不义之财； 非凡运气；（词根 outrage）</li>
</ul>
</li>
<li><p>hairy:  多毛的；令人胆战心惊的；勇敢的人</p>

<ul>
<li>BHAG(Big Hairy Audacious Goal)</li>
</ul>
</li>
</ul>


<h3>感觉</h3>

<ul>
<li>instinctive : 本能的；直觉的；天性的、天生的</li>
<li>intuitive: 直觉的；凭直觉的</li>
<li>tactile: 说话时爱碰别人的；（织物）手感好的；（经验或感觉）触觉的；可触知的、可感触到的；具有实体感觉的(绘画)

<ul>
<li>tactitle sensation:触觉、质感</li>
<li>tactitle hair:触毛、触觉毛</li>
<li>tactitle impression: 触觉印象；触感；感触；质感</li>
<li>tactile sensor:触觉感受器；触觉传感器</li>
</ul>
</li>
<li>obscure:鲜为人知的、不显著的、不引人注目的；（意思）不清楚的、不分明的；（语言、文体等）含糊的、晦涩的；复杂难懂的、难处理的；使含混、转弯抹角、难以理解；遮掩、遮盖、隐藏；

<ul>
<li>obscure bleeding:不明原因出血</li>
<li>obscure mathematics:模糊数学</li>
<li>obscure glass: 毛玻璃</li>
</ul>
</li>
</ul>


<h3>故意的</h3>

<ul>
<li>intentional: 故意的、有目的的</li>
<li>deliberate: 故意的、深思熟虑的、谨慎的</li>
</ul>


<h3>异议</h3>

<ul>
<li>dissent:异议；持有异议；对(国教、正教)表示不顺从;

<ul>
<li>dissent from: 不赞同；与&hellip;意见不同</li>
</ul>
</li>
</ul>


<h3>平凡的、单调的、世俗的</h3>

<ul>
<li>mundane:平凡的、单调的；平凡的事物、单调的事物；

<ul>
<li>mundane world:红尘、世俗社会；</li>
</ul>
</li>
<li>pedestrian: 行人；平庸乏味的(不满)；徒步的，步行的

<ul>
<li>pedestrian crossing:人行横道；</li>
<li>pedestrian street 步行街</li>
</ul>
</li>
<li>mortal: 终有一死的；凡人的、普通人的、人类的；人世的、现世的</li>
<li>tedium: 枯燥无聊；冗长乏味；单调、沉闷</li>
</ul>


<h3>世界观</h3>

<ul>
<li>pessimistic:悲观的、厌世的；悲观主义的

<ul>
<li>pessimist: 悲观主义者</li>
</ul>
</li>
<li>cynical:持人皆自私论的；（对事情的成功或人的诚信）怀疑的；愤世嫉俗的；讽刺的、冷嘲的；犬儒学派的、犬儒哲学的；

<ul>
<li>cynical realism: 玩世现实主义</li>
<li>cynical reason: 犬儒理性</li>
<li>cynic:愤世嫉俗者；犬儒学派的人</li>
</ul>
</li>
</ul>


<h3>刺激、激励</h3>

<ul>
<li>incentive: 鼓励、激励；刺激；动机、诱因

<ul>
<li>incentive tour 奖励旅游</li>
<li>learning incentive: 学习诱因、动机</li>
<li>incentive mechanism 激励机制</li>
<li>incentive theory 激励理论；诱因论</li>
</ul>
</li>
<li>motivation: 动力、诱因、刺激；引起的动机、激发起了的积极性（或学习兴趣）；积极性、干劲、兴趣</li>
<li>stimulus:</li>
<li>invigorate:鼓舞、增加活力、使精力充沛；刺激、鼓励；

<ul>
<li>vigorous: 体力的(劳动)；用力的；精力充沛的(人);强有力的(运动、活动)</li>
</ul>
</li>
<li>inspire:鼓舞、鼓励；唤起、激起;赋..以灵感，给&hellip;以启示；</li>
<li>initiative:(重要的)法案、倡议;主动权；主动性、积极性

<ul>
<li>take the initiative 采取主动；带头</li>
<li>on one&rsquo;s own initiative 主动地</li>
<li>subjective initiative 主观能动性</li>
</ul>
</li>
</ul>


<h3>权利</h3>

<ul>
<li>empower:授权、委托；使能够、允许、许可</li>
<li>privilege:(某人、某团体拥有的)特权；（一小部分人因财富或与有权人的关系而拥有的）特权；荣幸；

<ul>
<li>exorbitant privilege:过度特权</li>
<li>privilege level:特权级别</li>
<li>privilege escalation:权限提升</li>
<li>special privilege:特权；特别优惠、特殊许可</li>
</ul>
</li>
</ul>


<h3>赞美、奇迹</h3>

<ul>
<li>marvel: 惊奇、惊讶、奇迹（含赞叹的意思,侧重于事情）</li>
<li>wonder: 惊奇、惊讶、奇迹（含好奇、疑惑、有求知欲的意思,或者人创造的奇迹）</li>
<li>wonderland:仙境

<ul>
<li>alice in wonderland:爱丽丝奇境记</li>
</ul>
</li>
<li>miracle: 奇迹 (含认为不可能的意思)</li>
<li>breathtaking: 令人惊叹的(强调);使人兴奋的；令人激动的

<ul>
<li>breathtaking moment:激动人心的时刻</li>
</ul>
</li>
<li>extol:高度赞扬、赞美、颂扬、赞颂、称赞、吹捧(同extoll)</li>
<li>brilliant:  极有才智的，绝妙的(person,idea,performance); 杰出的、非常成功的(career);  (色彩、光线)鲜艳、鲜明、强烈的；光辉的，辉煌的，耀眼的，闪亮的，灿烂的..

<ul>
<li>brilliant achievement:辉煌成就；</li>
<li>brilliant blue:亮蓝，孔雀蓝；</li>
<li>round brilliant:圆形明亮型(钻石)</li>
</ul>
</li>
<li>gorgeous:  十分宜人的，吸引人的；性感的(人); （外观、色彩等）灿烂的、绚丽的，华丽的，豪华的</li>
<li>fascinate: 使着迷、陶醉、神魂颠倒；使呆住、慑住，蛊惑

<ul>
<li>fascinating: 迷人的，吸引人的；</li>
</ul>
</li>
<li>monumental:巨大的；意义深远的、不朽的；宏伟的；纪念碑的

<ul>
<li>monumental writing 碑文</li>
</ul>
</li>
<li>immensely:</li>
<li>terrific:极好的、了不起的；极大的、非常的、极度的；可怕的、可怖的、骇人的、令人生畏的</li>
</ul>


<h3>灾难</h3>

<ul>
<li>cataclysm:大变化，大灾难；大洪水;地震;(社会政治的)大变动</li>
<li>catastrophe: 大灾难，大祸(骤然而来)；

<ul>
<li>catastrophe insurance 重大事故保险</li>
</ul>
</li>
<li>catastrophic:灾难性的、悲惨的、毁灭性的；极糟的、失败的

<ul>
<li>catastrophic collapse:毁灭性破坏</li>
<li>catastrophic failure:突变失效；灾难性故障</li>
</ul>
</li>
<li>tragedy: 灾难;悲剧(戏剧的一种);</li>
</ul>


<h3>逃避</h3>

<ul>
<li>evade:逃避，回避，避开

<ul>
<li>evade taxation 逃税</li>
<li>evade school 逃学</li>
</ul>
</li>
<li>evasive: 避而不谈的，采取退避行动

<ul>
<li>evasive course:回避航向</li>
</ul>
</li>
<li>elude: 不为&hellip;所获;躲避,逃脱；避开(耳目，责任，查问..)；把..难住;不为&hellip;所记住

<ul>
<li>elude observation:避人耳目;</li>
<li>elude understanding:令人费解;</li>
<li>elude pursuit:逃避追捕</li>
</ul>
</li>
<li>elusive:难(懂、形容、记、取得)的;神出鬼没的

<ul>
<li>elusive game:难以捉摸的游戏</li>
</ul>
</li>
<li>seclusion:隔离、隔绝、孤立；隐退、隐居；僻静的地方、隐蔽之处

<ul>
<li>seclusion policy:锁国政策</li>
</ul>
</li>
<li>dodge:闪身避开、闪开、避开、躲避、闪避；规避、躲避、巧妙避开、设法或施计回避(问题、责任、义务、指责等)、推托、搪塞、对&hellip;做遁词、耍花招、玩弄诡计；避而不见

<ul>
<li>on the dodge: 东躲西藏以逃避警察追捕、在逃的；（为逃避追捕）无固定住处（的）；干鸡鸣狗盗（或不正经）的事情、勾当</li>
<li>be up to all kinds of dodges:施展各种诡计</li>
</ul>
</li>
<li>retreat:退出、离开；（军队）撤退；休息寓所

<ul>
<li>retreat into oneself: 退隐、离群索居</li>
<li>retreat from: 退出、放弃</li>
<li>in full retreat:全线溃退</li>
</ul>
</li>
</ul>


<h3>其他</h3>

<ul>
<li>spartan: 斯巴达人；勇士；斯巴达的、（生活方式）简朴的、清苦的</li>
<li>domestic: 国内的；家庭的；驯养的；一心只管家务的；国货，佣人

<ul>
<li>domestic flight: 国内航班</li>
<li>domestic sewage: 生活污水</li>
<li>domestic market: 国内市场</li>
<li>domestic demand: 国内需求</li>
<li>domestic product: 国内产品，本地生产</li>
</ul>
</li>
<li>consequential:随之而起的、作为结果的、后果的、继起的；逻辑上必然的；重要的、有重大意义的、引起重要后果的

<ul>
<li>consequential loss:间接损失、从属的损失、后果性损失</li>
</ul>
</li>
</ul>


<h2>冲突、对抗</h2>

<h3>冲突</h3>

<ul>
<li>clash: 发生响声的碰撞，引申为冲突</li>
<li>conflict: 冲突、矛盾、斗争  ；意见不合引起争执或战争。</li>
<li>collide:碰撞、引申为冲突</li>
<li>contradict: 反驳、矛盾、观点看法不一致</li>
<li>cripple:残疾人、跛子、瘸子；残缺的东西、有缺陷的事物；使受伤致残、受损、丧失活动能力；消弱</li>
</ul>


<h3>麻烦、障碍</h3>

<ul>
<li>hassle :麻烦；烦扰；激烈而持久的争论、争吵；激励的冲突、搏斗、斗争；纠缠、打扰；欺凌、骚扰、凌辱、折磨</li>
<li>harass:骚扰、侵扰</li>
<li>friction: （人与人之间的）摩擦、（因意见分歧、急躁产生的）不和、争执、摩擦力；

<ul>
<li>frictionless: 无摩擦的；光滑的</li>
</ul>
</li>
<li>procrastination:拖延；耽搁</li>
<li>stumble:踉跄、绊脚、绊倒、跌倒；蹒跚、东倒西歪的走；失足、失误、犯错误、铸成大错；使为难、使困惑、使犹豫不决

<ul>
<li>stumble upon:偶然发现</li>
<li>stumble on:无意中发现、偶然遇到、碰巧找到</li>
<li>stumble over:给&hellip;绊倒；结结巴巴额说</li>
</ul>
</li>
<li>impasse:僵局、僵持；死路；绝境</li>
<li>tether:(栓动物的)绳、链；拴住、约束、束缚;(活动)范围；（能力、智能的）限度；

<ul>
<li>at the end of one&rsquo;s tether:束手无策、山穷水尽、智穷计尽、走投无路、忍无可忍</li>
</ul>
</li>
<li>reluctant:不愿意的；勉强的；顽抗的、反抗的、反对的

<ul>
<li>reluctant to help:不情愿帮忙</li>
</ul>
</li>
<li>foil: 阻挠、挫败、使成泡影；（狩猎）扰乱（嗅迹或足迹）；金属箔；用箔包裹、在&hellip;上贴箔、用箔为&hellip;衬底；花剑、轻剑

<ul>
<li>break one‘s foil:（猎物）从原路返回逃脱</li>
<li>run（uopon）the foil:（猎物）奔回原路(以搅乱踪迹迷惑猎犬)；使迷惑、使产生错觉</li>
</ul>
</li>
</ul>


<h3>诱骗，诱饵</h3>

<ul>
<li>decoy: 诱饵；引诱(鸟、兽)；诱骗；被诱（骗）

<ul>
<li>optical decoy:光学假目标</li>
</ul>
</li>
<li>bait: 饵（食物）;放诱饵; 诱饵;折磨

<ul>
<li>cut bait or fish: 要么全力以赴，要么放弃</li>
</ul>
</li>
<li>lure: 吸引，引诱，诱惑；诱饵;诱惑力，魅力；

<ul>
<li>alight on the lure: 上当，上钩</li>
<li>come(stoop) one one‘s(the)lure: 上当、上钩</li>
<li>bring someone to his/the lure:引某人上钩</li>
</ul>
</li>
<li>entice: 怂恿,唆使；利诱，引诱；</li>
</ul>


<h3>犯罪、暴力行为</h3>

<ul>
<li>blackmail: 敲诈(通过暴露秘密); 要挟(通过情感，道德等); 敲诈勒索得来的钱财

<ul>
<li>blackmail someone into doing something 胁迫某人做某事</li>
</ul>
</li>
<li>extortion:  勒索(通过强迫，威胁); (官吏使用职权、暴力、威胁等手段)敲诈勒索钱财(罪)；被勒索的钱财</li>
<li>chantage:敲诈；勒索(法语)</li>
<li>misdemeanor:轻罪；品行不端</li>
<li>felony: 重罪、(法律)严重犯罪(如谋杀、放火、强奸等)</li>
<li>reprieve:(被判)缓刑；撤销(刑罚);暂缓、暂缓令；</li>
<li>intimidate: 恐吓，威胁；胁迫

<ul>
<li>to intimidate somebody into doing something :威逼某人做某事</li>
</ul>
</li>
<li>coercion: 强制，强迫；威压；高压政治;

<ul>
<li>state coercion:国家强制</li>
<li>coercion policy:高压政策</li>
<li>coerce:强制，胁迫，迫使；</li>
<li>coerce payment:强制还债</li>
</ul>
</li>
<li>vandalize: 肆意破坏；摧残

<ul>
<li>vandal: 故意破坏者(公共财产、文化艺术), (汪达尔人,日耳曼人的一支，曾攻占罗马肆意坡口)</li>
</ul>
</li>
<li>mob: 暴民，乱民，犯罪团伙；围攻

<ul>
<li>mobster:暴徒</li>
<li>mobocracy:暴民统治</li>
</ul>
</li>
<li>rob: 抢劫、盗窃，抢走，剥夺

<ul>
<li>robbery:抢劫</li>
</ul>
</li>
<li>thug: 暴徒，恶棍，凶手，刺客;

<ul>
<li>company thugs: 私营企业雇佣的保镖</li>
</ul>
</li>
<li>punk: 朋克；小流氓</li>
<li>rogue: 流氓，无赖；捣蛋鬼（情感，喜欢）；行为异常的；劣种（农业）

<ul>
<li>Rogue Trooper:侠盗骑兵</li>
</ul>
</li>
<li>gangster:(结成团伙的)匪徒；</li>
<li>larceny: 盗窃；盗窃罪</li>
<li>fraud:  诈骗罪；骗人的东西，计谋，骗局；骗子，伪善者；

<ul>
<li>in fraud of.. 为了诈骗&hellip;</li>
</ul>
</li>
<li>bribery: 行贿；受贿</li>
<li>trespass:擅自进入、非法侵入、未经许可进入私人土地；侵犯、侵占；违反、冒犯；骚扰、打扰、妨碍；违反、违背</li>
<li>intrude:侵犯；打扰、扰乱；侵入、闯入(into)；占用（某人的时间等）；把&hellip;硬挤入(into)；把&hellip;强加于(on,upon)</li>
<li>confiscate:没收、充公、征用；被没收的、被充公的、被征用的；财产被没收的

<ul>
<li>confiscate land:征地、土地征用</li>
<li>administration confiscate:行政没收</li>
</ul>
</li>
<li>mayhem:极混乱状态；伤残；（法律）重伤害罪、故意伤害致残罪；蓄意破坏（或暴力）行为</li>
<li>detonate:引爆、爆炸；引起、激发（连串事件）

<ul>
<li>detonation:爆炸、引爆；</li>
<li>detonation velocity:起爆速度、爆震速度、爆炸速度</li>
<li>detonation wave: 爆炸波</li>
<li>sympathatic detonation:殉爆(由一个炸药包激发附件另一个爆轰)</li>
</ul>
</li>
<li>detonator:导火线、导火索、导爆器、雷管；爆炸物、炸药

<ul>
<li>electric detonator:电雷管</li>
<li>detonator device:爆炸装置</li>
<li>detonator lead: 雷管导线</li>
</ul>
</li>
<li>venue:举办场所;(法)犯罪地点、审批场所；（事情的）发生地点、现场；（争论中所采取的）立场

<ul>
<li>outdoor venue:户外场地</li>
<li>virtual venue:虚拟灰常</li>
<li>religious venue:宗教场所</li>
</ul>
</li>
<li>traitorous:背叛的、叛变的、不忠的；叛徒的、卖国贼的、犯叛国罪的

<ul>
<li>traitorous glory:卖国求荣</li>
<li>traitorous action:叛变行为</li>
</ul>
</li>
<li>pirate:海盗；盗版(CD、DVD、书籍、计算机程序等)；非法复制

<ul>
<li>pirate game:海盗游戏</li>
<li>pirate bay:海盗湾</li>
<li>pirate software:盗版软件</li>
</ul>
</li>
<li>tamper:篡改（文件等）、干预、损害；瞎弄、乱弄、摆弄；（用不正当手段）影响、左右、贿赂；</li>
<li>brutal:残暴的、凶猛的、残忍的、粗鲁的、冷酷无情的；不留情面的(诚实、直白);非常严厉的；（气候）严酷的、冷人难受的、难以忍受的；苛刻的

<ul>
<li>brutal violence:暴力</li>
</ul>
</li>
</ul>


<h3>军事、战斗、打斗</h3>

<ul>
<li>conquer: 征服、攻占、夺取、控制；克服、战胜、击败；获胜、成功；

<ul>
<li>conquer europe: 征服欧洲</li>
<li>dive and conquer:分而治之；各个击破</li>
</ul>
</li>
<li>vanquish:征服、彻底击败；克服；抑制(感情)</li>
<li>chamber:（身体或器官内的）室、膛；会议厅、（官邸的）接待室、（作特殊用途的）房间、房间（尤指卧室、寝室）；议院；室内的、小型的(音乐)；把&hellip;关进房间、禁闭；<code>把（弹药）装入枪膛</code>

<ul>
<li>chamber of commerce:商会</li>
<li>conbustion chamber:[机]燃烧室</li>
<li>red chamber: (加拿大议会)参议院</li>
</ul>
</li>
<li>enlist:（尤指自愿的）入伍、参军、应募；热心参加、赞助、支持某事业(企业、运动)；使&hellip;入伍、服兵役；赢得&hellip;的支持、谋取&hellip;的帮助（赞助）;为某事业、企业征集（人才、服务等）</li>
<li>tactic:战术、策略</li>
</ul>


<h3>赌博</h3>

<ul>
<li>wager: 下赌注；赌注，打赌；赌金

<ul>
<li>A wager is a fool’s argument:只有傻瓜才以打赌解决争论</li>
</ul>
</li>
</ul>


<h3>欺骗、说谎、恶作剧、小丑等</h3>

<ul>
<li>hoax:谎报(电话、信息等)；欺骗、戏弄；骗局、圈套</li>
<li>prank: 恶作剧、开玩笑；打扮；装饰、点缀；打扮的漂亮、盛装卖弄</li>
<li>clown: 小丑；滑稽的人、好说笑话的人、言行轻率的人、不足取信的人；粗鲁的人、乡巴佬、农民、庄稼汉</li>
<li>buffoon: (马戏、喜剧等)小丑，丑角；滑稽的人、爱讲粗俗笑话的人；粗俗而愚笨的人、缺乏教养的人；讲粗俗笑话、开下流玩笑；插科打诨</li>
<li>plausible: (解释或叙述)看似合理的、表面上讲得通的；（人）看似可信的；巧嘴的、花言巧语的

<ul>
<li>plausible reasoning:合情推理</li>
<li>plausible move:虚着</li>
<li>plausible explanation:似有道理的解释；可信的解释</li>
</ul>
</li>
</ul>


<h2>行为、动作</h2>

<h3>体育、运动、健身</h3>

<ul>
<li>workout: 健身，（体育）锻炼，练习</li>
<li>gym: 健身房,体育馆；（学校的）体育活动</li>
<li>gymnastic: 体操的，体育的</li>
<li>stadium: 露天大型体育场</li>
<li>surf: 冲浪；浏览（互联网）</li>
<li>home run: 全垒打(棒球)</li>
</ul>


<h3>模仿</h3>

<ul>
<li>imitate:模仿，仿造</li>
<li>ape:猿类，引申为模仿</li>
<li>mimic: 模仿；善于模仿的人；滑稽剧演员、小丑、丑角；假的、假装的；拟态的(生物)</li>
</ul>


<h3>散步</h3>

<ul>
<li>roam:闲逛、漫游、漫步；徘徊、流浪；（有目的的）走来走去</li>
<li>roamer: 漫游者；流浪者；漂泊者</li>
<li>pedestrian: 行人；平庸乏味的(不满)；徒步的，步行的 （pedestrian crossing:人行横道；pedestrian street 步行街）</li>
</ul>


<h3>刺、捅</h3>

<ul>
<li>stab: 刺、捅 （刀，利器）</li>
<li>poke: 捅、戳(手指，棍棒)</li>
<li>prong: (叉子等的)尖头、尖齿；叉子、干草耙；（小河的）分岔、支流；（树木的）分叉、树枝；（政策或计划等）部分；（用叉等）刺、戳；耙开；挖掘（泥土等）

<ul>
<li>prong fork:尖头叉</li>
</ul>
</li>
</ul>


<h3>其他</h3>

<ul>
<li>engagement: 约会；订婚约定；订婚时期；约束、约定（诺言、许诺、承诺、契约、婚约、受聘）；交战、遭遇战(军事)；需偿付的债务（商业） （break an * engagement 违约 meet one’s engagements 偿还债务；履行(契约等)义务）</li>
<li>proposal: 提案、提议(正式书面的)；求婚；推荐、申请

<ul>
<li>agreen to a proposal 同意某项建议(提案)</li>
<li>make a proposal (of marriage) 求婚</li>
<li>make(offer) proposal of(for) 向…求婚</li>
<li>design proposal 设计方案）</li>
</ul>
</li>
<li>congeal:凝结、凝固；使冻结、凝结、冻僵；使固定、一成不变；使瘫痪；变冷

<ul>
<li>congeal well:冻结井</li>
<li>freeze congeal:由于冷却而结冰</li>
</ul>
</li>
<li>dismantle:拆除&hellip;的家园(装备、装置、设备、防御工事等)；拆开、拆散、拆卸；解散；逐步废除；脱掉&hellip;的衣服、除去&hellip;的覆盖物(of);(机器等)可拆卸的、可拆开的</li>
<li>squirt:挤、喷出；（用某液体）喷(某物)；喷射器、注射器

<ul>
<li>squirt gun:水枪、喷枪、油枪、喷射器</li>
</ul>
</li>
<li>tackle:</li>
</ul>


<h2>语言、文学</h2>

<h3>术语、行话</h3>

<ul>
<li>lingo: （不会说、听不懂的）外语；行话</li>
<li>parlance: 术语;说法、写法、用语；

<ul>
<li>in common parlance: 照一般说法，俗话说；</li>
<li>in legal parlance: 用法律上的话来说</li>
<li>diplomatic parlance: 外交辞令</li>
<li>engineering parlance: 工程术语</li>
</ul>
</li>
<li>paraphrase:释义、改述；意译</li>
<li>delineate:描述、叙述；刻画、描写；划定(边界)；画出（或勾画出）&hellip;的轮廓,描述出&hellip;的轮廓，描出&hellip;的外形</li>
</ul>


<h3>故事、传说</h3>

<ul>
<li>novel: 长篇小说；新法、附律；新奇的</li>
<li>tale: 故事(包含神奇的、令人激动的事件)；（对真实事件有趣的、令人激动的）描述；</li>
<li>graffiti:墙上乱写乱画的东西、涂鸦；在&hellip;上涂鸦、乱写乱画；[考古学]（古罗马石头、墙壁上的）粗糙刻画</li>
</ul>


<h3>戏剧</h3>

<ul>
<li>comedy : 喜剧片</li>
<li>tragedy: 悲剧片</li>
<li>horror: 恐怖片</li>
<li>humor: 幽默片</li>
<li>documentaries 记录片</li>
<li>action film 动作片</li>
<li>detective film 侦探片</li>
<li>overture:(歌剧、戏剧等的)序曲、前奏曲；序诗、序言、事件的开端；（为开始谈判、建立友好关系等做出的）主动表示、提议、姿态；</li>
</ul>


<h3>法律</h3>

<ul>
<li>precedent:先例;(法律)判例、惯例；在前的、在先的、前面的；

<ul>
<li>have no precedent to go by 无先例可循</li>
<li>set(create) a precedent for 为&hellip;开先例</li>
<li>condition precedent:先决条件；前提条件</li>
<li>binding precedent:有约束力的判例</li>
<li>judicial precedent:司法判例</li>
</ul>
</li>
<li>waiver:弃权、自动放弃；责任免除、豁免；弃权者；弃权声明书</li>
</ul>


<h3>计量单位</h3>

<ul>
<li>liter:公升（容量单位）</li>
<li></li>
</ul>


<h2>疾病、医疗</h2>

<h3>医学、医院</h3>

<ul>
<li>paramedic:(医疗)护理人员;(伞兵)军医;医疗助手

<ul>
<li>paramedic skill:辅助医疗技术</li>
</ul>
</li>
<li>pharmacy: 药房；制药业；药剂学；</li>
<li>scalpel:手术刀、柳叶刀</li>
<li>radiology: 放射医学</li>
<li>prognosis:(对病人能否康复的)预后</li>
<li>tumor:肿瘤、肿块</li>
<li>autopsia:尸体解剖</li>
<li>coroner:验尸官</li>
<li>vitals:生命体征：脉搏，血压，体温等;(人体)的重要器官；要害</li>
<li>anatomy: 解剖，解剖学;(动、植物)结构、构造；身体

<ul>
<li>human anatomy:人体解剖学</li>
</ul>
</li>
<li>surgical:外科的；手术上的；外科手术、外科病房

<ul>
<li>surgical department:外科</li>
<li>surgical nursing:外科护理</li>
<li>surgical operation: 外科手术；外科手术式的作战</li>
<li>surgical intervention:手术治疗；外科手术</li>
</ul>
</li>
<li>chamber:<code>（身体或器官内的）室、膛；</code>会议厅、（官邸的）接待室、（作特殊用途的）房间、房间（尤指卧室、寝室）；议院；室内的、小型的(音乐)；把&hellip;关进房间、禁闭；把（弹药）装入枪膛

<ul>
<li>chamber of commerce:商会</li>
<li>conbustion chamber:[机]燃烧室</li>
<li>red chamber: (加拿大议会)参议院</li>
</ul>
</li>
<li>narcotic:麻醉剂、毒品、致幻毒品；麻醉的、麻醉性的；吸毒成瘾者；

<ul>
<li>narcotic drugs:麻醉药品；毒品</li>
<li>narcotic dependence:麻醉品依赖</li>
<li>narcotic plant:罂粟树</li>
</ul>
</li>
<li>incubator:孵卵器、保温箱；早产保育箱、细菌培养器；</li>
<li>insulin:胰岛素

<ul>
<li>insulin pump:胰岛素泵</li>
<li>insulin receptor:胰岛素受体</li>
<li>insulin resistance:扛胰岛素性</li>
</ul>
</li>
</ul>


<h3>疾病</h3>

<ul>
<li>paralysis: 瘫痪；瘫痪状态；</li>
<li>contagion: 传染、蔓延、传导、扩散;传染病

<ul>
<li>financial contagion:金融传染、金融危机传染</li>
<li>infection contagion:传染病、流行症</li>
<li>psychic contagion:心理传染、精神感染</li>
<li>emotional contagion:情绪感染</li>
</ul>
</li>
<li>epidemic:(疾病的)流行、（坏事的）盛行；流行病、瘟疫

<ul>
<li>epidemic disease:流行病、传染病、流行性疾病</li>
<li>cholera epidemic:霍乱流行</li>
<li>epidemic situation:疫情</li>
<li>epidemic prevention:防疫、疫病防治</li>
</ul>
</li>
<li>hypertension:高血压； （情绪等的）过度紧张、张力过强</li>
</ul>


<h2>资产</h2>

<h3>金融</h3>

<ul>
<li>portfolio: 公文包，文件夹；投资组合；（用于参赛或求职的）作品选集；（高管的）职责

<ul>
<li>investment portfolio 投资证券组合</li>
</ul>
</li>
<li>kite:风筝；空头票据；开(空头支票、抵用票据); 涂改(支票);迅速上升、（价格）飞涨贪得无厌的人

<ul>
<li>fly one’s kite 试探舆论</li>
<li>fly a kite放风筝；开空头支票；试探舆论</li>
<li>as high as a kite( 因饮酒或吸毒而)飘飘然的、如痴如狂的</li>
<li>kite flying 放风筝，开空头支票，签发通融票据以资弥补</li>
</ul>
</li>
<li>mortgage:  房屋抵押贷款；抵押；以..做担保，把&hellip;许给，献身于(to mortgage one’s future)

<ul>
<li>mortgage loan:按揭贷款；</li>
<li>housing mortgage:住房按揭</li>
<li>secured loan:担保贷款</li>
</ul>
</li>
<li>equity: 资产净值;普通股、股东权益；公平

<ul>
<li>Private Equity:私募股本、私募基金</li>
<li>Negative Equity: 负资产</li>
<li>equity investment: 产权投资、股本投资</li>
<li>equity financing: 发行股票筹资；产权筹资</li>
</ul>
</li>
<li>voucher: 代币券、购物券；证明人、担保人；收据、凭证、证件、证书；传票、凭单

<ul>
<li>gift voucher:礼券(git token)</li>
<li>cash voucher:优惠券；现金凭证</li>
<li>voucher system:付款凭单制度；</li>
</ul>
</li>
<li>coupon: 优惠券；（报纸、杂志附带的）传单；（附在证券、票证上可撕下的）赠券、优待券、入场券； （公债的）息票；

<ul>
<li>coupon (bond) 息票；附息票债券</li>
<li>coupon rate: 票息、息票利率</li>
</ul>
</li>
<li>liquidity: 流动性、流动资产、资产折现力；

<ul>
<li>liquidity margin:流动资金比例；流动性保证金</li>
</ul>
</li>
</ul>


<h3>商业</h3>

<ul>
<li>mart:市场、商业中心、贸易中心；集市、交易会、拍卖会；买卖、讨价还价

<ul>
<li>Wal-Mart:沃尔玛</li>
<li>Online Mart:网上商城；网上购物</li>
</ul>
</li>
<li>barter:物物交换、进行易货物贸易、讨价还价、以&hellip;作为交换

<ul>
<li>barter trade:易货贸易、实物交易</li>
<li>barter away:吃亏廉卖；以&hellip;做交易</li>
</ul>
</li>
<li>tuition:学费、指导费；教学、讲授、教诲；

<ul>
<li>tuition fee:学费</li>
<li>tuition waiver:学费减免</li>
<li>tuition standard:学费标准</li>
<li>direct tuition:直接教导</li>
</ul>
</li>
</ul>


<h3>遗产、继承</h3>

<ul>
<li>heritage: (国家)遗产(品质、传统、文化)等

<ul>
<li>culture heritage 文化遗产</li>
<li>nature heritage 自然遗产</li>
</ul>
</li>
<li>legacy:（个人）遗产(财富)；遗留问题

<ul>
<li>legacy system:遗留系统；</li>
</ul>
</li>
<li>inheritance:继承物(财富)；沿袭物(工作、问题、态度)；遗传特征

<ul>
<li>inheritance and innovation: 传承与创新</li>
<li>inheritance tax:遗产税</li>
</ul>
</li>
<li>entail: 牵涉、导致；需要、使必要；使承担；限定继承权；预</li>
<li>demise:终止、死亡；(行动或存在的)终止、终结；失败；地位(职位)的丧失；(政府因死亡或退位)让位、传位、禅位；（法律:在有限的时间内）转让（地位等）；遗赠(产业)</li>
</ul>


<h2>政治</h2>

<ul>
<li>communism: 共产主义</li>
<li>socialism:  社会主义</li>
<li>socialist: 社会主义的；社会主义者、党员</li>
<li>chamber:（身体或器官内的）室、膛；会议厅、（官邸的）接待室、（作特殊用途的）房间、房间（尤指卧室、寝室）；<code>议院；</code>室内的、小型的(音乐)；把&hellip;关进房间、禁闭；把（弹药）装入枪膛

<ul>
<li>chamber of commerce:商会</li>
<li>conbustion chamber:[机]燃烧室</li>
<li>red chamber: (加拿大议会)参议院</li>
</ul>
</li>
<li>deniability:(官员等)推诿搪塞的本事，拒绝承认、矢口否认的本领(尤指总统或其他高级官员未正式得到情报前对不正当或非法行为表示否认知悉或卷入);否决权(否定总统等政府高级官员与违法活动的关系)

<ul>
<li>plausible deniablity:合理的推诿；怕承担责任</li>
</ul>
</li>
<li>regime:政权、政体、社会制度(表不满)；当政时间、统治时期；（机构、公司或经济体的）管理方式；养生法

<ul>
<li>regime change:政权更替，改朝换代</li>
<li>flow regime:流态、水流动态</li>
<li>water regime:水情、水文状况</li>
<li>military regime:军事政权</li>
<li>investment regime:投资管理体制、投资模式</li>
</ul>
</li>
<li>overlord:霸王、大君主、最高统治者、封建领主</li>
</ul>


<h1>物</h1>

<h2>名称</h2>

<ul>
<li>copper: 铜(化学元素Cu);铜币；铜制的；铜色的；用铜皮包、盖、镀铜；警察

<ul>
<li>a copper caption:冒充有地位的人；伪船长</li>
<li>hot copper:酒醉后的口干舌燥</li>
<li>cool one‘s coppers:喝解酒饮料润喉</li>
<li>copper mine:铜矿</li>
</ul>
</li>
<li>brass:黄铜；铜管乐器

<ul>
<li>top brass:高级军官；要员；</li>
<li>brass wire:黄铜丝</li>
<li>brass band:军乐队、吹奏乐队</li>
</ul>
</li>
<li>brazen:黄铜的、黄铜制的；（颜色、强度等）似黄铜的、黄铜色的；厚脸皮的、厚颜无耻的、肆无忌惮的、无所顾忌的；厚着脸皮干、肆无忌惮地干、使变得无耻、无耻的对待

<ul>
<li>brazen it out:(虽已做错仍)厚着脸皮硬挺、干下去，装作没有做错似的，不觉羞愧的对待</li>
</ul>
</li>
<li>bronze:青铜；青铜色的

<ul>
<li>bronze medal:铜牌</li>
<li>bronze age:青铜器时代</li>
<li>bronze ware:铜器、青铜器</li>
</ul>
</li>
<li>ingredient:(烹调用的)原料、（混合物的）组成成分；（构成）成分、要素、因素；

<ul>
<li>active ingredient:活性成分</li>
<li>paint ingredient:涂料成分、油漆成分</li>
<li>food ingredient:食物配料成分</li>
<li>accessory ingredient:助剂、配合剂</li>
</ul>
</li>
<li>aluminum:铝

<ul>
<li>aluminum alloy:铝合金</li>
<li>aluminum foil:铝箔</li>
</ul>
</li>
<li>alloy:(金属的)成色、纯度、品位；合金、合金状态；（和金或银等贵金属熔合的）贱金属、低级金属；使(贵金属)不纯、降低成色、变硬、变轻；合铸；（混有杂质）使低劣、低贱；（通过掺杂）减少、减损（幸福、兴趣、乐趣等）

<ul>
<li>aluminum alloy:铝合金</li>
<li>magnesium alloy:镁合金</li>
</ul>
</li>
<li>tin:锡(化学元素Sn)；锡制的、镀锡的；冒牌的、无价值的、卑贱的；结婚十周年；马口铁罐、马口铁器皿、金属罐、罐中之物；把食品装罐、罐装

<ul>
<li>live out of tins(cans):靠罐头食品过日子</li>
<li>on the tin:使用警徽的（指凭此可得到免费用餐等特殊照顾）</li>
<li>straight from the tin:新鲜的、第一手的、原来的</li>
<li>tin wedding:十周年锡婚</li>
</ul>
</li>
<li>foil: 阻挠、挫败、使成泡影；（狩猎）扰乱（嗅迹或足迹）；金属箔；用箔包裹、在&hellip;上贴箔、用箔为&hellip;衬底；花剑、轻剑

<ul>
<li>break one‘s foil:（猎物）从原路返回逃脱</li>
<li>run（uopon）the foil:（猎物）奔回原路(以搅乱踪迹迷惑猎犬)；使迷惑、使产生错觉</li>
</ul>
</li>
</ul>


<h2>描述</h2>

<ul>
<li>cumbersome:笨重的、累赘的、麻烦的；不方便的、缺乏效率的；</li>
<li>fragile:易碎的、脆的、易损坏的；脆弱的、虚弱的、体弱的；纤细的、不实在的、缺少力量的、无价值的、不足信的

<ul>
<li>fragile goods: 易碎商品、易碎货物</li>
</ul>
</li>
<li>feeble:虚弱的、软弱的、无力的；低能的、智力差的、性格软弱的、道德差的；不可信的；（光线、音量、响度、清晰度等）弱的、微弱的

<ul>
<li>feeble solution:弱解</li>
<li>feeble current:弱电流</li>
</ul>
</li>
</ul>


<h1>环境</h1>

<h2>水</h2>

<ul>
<li>dock : 码头、船坞</li>
<li>pier: 凸式码头、桥墩</li>
<li>harbour:港口、藏匿</li>
<li>haven: 港口、停泊处；使入港、使停泊；避难所、安全住所、避风港；为&hellip;提供庇护所；

<ul>
<li>safe haven: 安全港；容许幅度标准</li>
<li>tax haven: 避税场所(税率很低的国家或地区)</li>
</ul>
</li>
<li>coast: 海岸</li>
<li>beach: 沙滩</li>
<li>marine: 海军陆战队士兵；海洋的；海事的</li>
<li>archipelago: 群岛，列岛；</li>
<li>wetland: 湿地、沼泽地</li>
</ul>


<h2>空</h2>

<ul>
<li>aircraft: 飞机、飞行器（ 所有能在空中飞的机器,飞艇，滑翔机&hellip;）</li>
<li>chopper:  砍、砍刀、斩波器、引申为直升机，乘坐直升机</li>
<li>helicopter: 直升机，乘坐直升机 ;

<ul>
<li>copter: helicopter的缩写</li>
</ul>
</li>
<li>jetliner: 大型喷气式客机</li>
<li>aeroplane:飞机，同airplane</li>
<li>flight: 飞行，航班；一段(台阶或楼梯)</li>
<li>aviation: 航空；飞机制造业；

<ul>
<li>civil aviation 民用航空</li>
<li>aviation industry 航空工业</li>
</ul>
</li>
<li>aviator: 飞行员</li>
<li>pilot: 飞行员；领航员；舵手；驾驶(飞机)，为(船只)领航;带领、引导

<ul>
<li>pilot project 试点项目；样板工程</li>
</ul>
</li>
<li>co-pilot :副驾驶</li>
<li>airborne：在飞行中的;空降的；空气中的；空运的、机载的(军事)

<ul>
<li>airborne troops:空降部队</li>
</ul>
</li>
<li>windborne: 风传送的；风载的</li>
<li>parachute: 降落伞；使空降、跳伞；空投

<ul>
<li>golden parachute 金降落伞</li>
</ul>
</li>
<li>parafoil: 翼伞</li>
<li>kite:风筝；空头票据；开(空头支票、抵用票据); 涂改(支票);迅速上升、（价格）飞涨贪得无厌的人

<ul>
<li>fly one’s kite 试探舆论</li>
<li>fly a kite放风筝；开空头支票；试探舆论</li>
<li>as high as a kite (因饮酒或吸毒而)飘飘然的、如痴如狂的</li>
<li>kite flying 放风筝，开空头支票，签发通融票据以资弥补</li>
</ul>
</li>
</ul>


<h2>雾、烟雾</h2>

<ul>
<li>mist</li>
<li>haze</li>
<li>fog</li>
<li>smog</li>
<li>moist</li>
<li>moisture</li>
</ul>


<h2>污染</h2>

<ul>
<li>contaminate: 被(烟尘、化学物品、辐射等)污染、弄脏； 污染</li>
<li>pollute: 污染（水，空气，土地）；受污染的；亵渎，败坏(道德等)</li>
</ul>


<h2>地理</h2>

<ul>
<li>arctic: 北极，北极的，引申为极冷的</li>
<li>polar: 极地的（北极，南极），引申为相反的，对立的</li>
<li>nordic: 北欧的，北欧人</li>
<li>boreal:北的，北方的，北风的</li>
<li>austral:南的，南方的，南部的</li>
<li>lunar:月亮的，阴历的</li>
<li>solar:太阳的，日光的，</li>
<li>steppe:大草原；干草原(没有树木)</li>
<li>archipelago: 群岛，列岛；</li>
<li>marine: 海军陆战队士兵；海洋的；海事的

<ul>
<li>Marine ecosystem: 海洋生态系统</li>
<li>Marine engineering: 船舶工程；轮机工程；海洋工程；海事工程</li>
</ul>
</li>
<li>vicinity:附近,周边地区，临近地区

<ul>
<li>in vicinity of:在&hellip;附近，在&hellip;左右</li>
<li>in the vicicniy:在附近</li>
<li>immediate vicinity:紧邻；临近</li>
<li>Newton Vicinity:纽顿附近</li>
</ul>
</li>
</ul>


<h2>生态、气候相关</h2>

<ul>
<li>arid: 干旱的；（由于缺水）贫瘠的，不毛的(土地)；</li>
<li>lush: 茂盛的；豪华的；酒鬼</li>
<li>habitat: (动植物的)栖息地，产地；住处；

<ul>
<li>habitat destruction: 生态环境破坏</li>
<li>habitat condition:居住条件</li>
</ul>
</li>
<li>wetland: 湿地、沼泽地</li>
<li>tropical: 热带的、适于热带的、住在热带的、具有热带特点的;湿热的、闷热的、炎热的；热情的、热烈的

<ul>
<li>tropical ecosystems: 热带生态系统</li>
<li>tropical forests:热带森林</li>
<li>tropical fruit: 热带水果</li>
<li>tropical storm: 热带风暴</li>
<li>tropical cyclone:热带气旋</li>
</ul>
</li>
</ul>


<h2>大都市</h2>

<ul>
<li>metro</li>
<li>metropolis</li>
<li>bigalopolis</li>
</ul>


<h2>国家</h2>

<ul>
<li>Vietnam (The Socialist Republic of Vietnam) 越南

<ul>
<li>Vietnamese:越南人，越南语,越南的，越南人的</li>
<li>vietcong: 越共</li>
</ul>
</li>
<li>Norway (The Kingdom of Norway) 挪威

<ul>
<li>Norwegian:挪威的，挪威人(的)，挪威语(的)</li>
</ul>
</li>
<li>Finland  (The Public if Finland) 芬兰</li>
<li>Sweden (The Kingdom of Sweden) 瑞典

<ul>
<li>Swede:瑞典人；甘蓝，大头菜</li>
<li>swedish:瑞典的；瑞典语的；瑞典人的；瑞典语；瑞典人</li>
</ul>
</li>
<li>Denmark (The Kingdom of Denmark) 丹麦</li>
<li>Netherland (The Kingdom of the Netherlands) 荷兰

<ul>
<li>Holland 荷兰(荷兰的两个省)</li>
<li>Dutch: 荷兰的，荷兰人的，荷兰语的</li>
</ul>
</li>
<li>Turkey (The Republic of Turkey) 土耳其 (turkey也有火鸡的意思)</li>
<li>Moroco: 摩洛哥(Maroc 法语)</li>
<li>Afghan: 阿富汗人；阿富汗语；阿富汗的、阿富汗人的</li>
<li>Ecuador:厄瓜多尔(南美洲)

<ul>
<li>Ecuadorian: 厄瓜多尔的、厄瓜多尔人的</li>
</ul>
</li>
<li>soviet: 前苏联的、前苏联人；(前苏联地方、区域或国家)代表议会、苏维埃的

<ul>
<li>soviet Union:苏联</li>
<li>soviet Empire:苏维埃帝国</li>
<li>soviet Navy:苏联海军</li>
</ul>
</li>
<li>Paraguay（The Republic of Paraguay）:巴拉圭</li>
<li></li>
</ul>


<h2>城市、地区</h2>

<ul>
<li>megacity : 大城市(人口超过1000万)</li>
<li>Scotland:苏格兰</li>
<li>NewYork 别名 Gotham, Big Apple</li>
<li>Hudson: 哈德逊河（NewYork）</li>
<li>Bergen: 卑尔根（挪威西南部港市）</li>
<li>Tromso: 特罗姆瑟（挪威北部港市）</li>
<li>Spitsbergen:斯匹次卑尔根岛（挪威斯瓦尔巴群岛中最大的一个）</li>
<li>Sausalito: 索萨利托，加州</li>
<li>San Francisco: 旧金山(圣.弗朗西斯科)</li>
<li>GGB: Golden Gate Bridge 金门大桥</li>
<li>Alcatraz: 阿尔卡特兹岛（恶魔岛，旧金山景点）</li>
<li>Marin Country:马林县，加州，San Francisco北部</li>
<li>Cupertino:库比提诺(苹果公司所在地)</li>
<li>Maui :毛伊岛（夏威夷群岛第二大岛）</li>
<li>Cappadocia:卡帕多西亚（土耳其）</li>
<li>Marseille:  马赛（法国）</li>
<li>Barcelona: 巴塞罗那(西班牙)</li>
<li>Duesseldorf: 杜塞尔多夫（德国）</li>
<li>Seattle: 西雅图,又名Emerald City 绿宝石之城</li>
<li>Tangier: 丹吉尔(摩洛哥港口城市)</li>
<li>Prague: 布拉格</li>
<li>Dubai: 迪拜</li>
<li>Nha Trang:芽庄（越南海滨城市）</li>
<li>Dalat: 大叻(le) (越南旅游城市)</li>
<li>Hoi An: 会安古城 (越南)</li>
<li>Hanoi:河内(越南)</li>
<li>Christchurch: 基督城(新西兰)</li>
<li>Aoraki /Mount Cook National Park: 奥拉基/库克山国家公园 （新西兰）</li>
<li>Franz Josef Glacier: 弗朗兹约瑟冰山(新西兰)</li>
<li>Alps: 阿尔卑斯山脉</li>
<li>Berkeley:伯克利(美国加州)</li>
<li>Patagonia: 巴塔哥尼亚（南美的一个地区）</li>
<li>Galapagos:加拉帕戈斯群岛（厄瓜多尔）</li>
<li>Moscow: 莫斯科</li>
<li>University of Illinois at Urbana-Champain:美国伊利诺伊州香槟分校</li>
<li></li>
</ul>


<h1>行</h1>

<h2>地铁</h2>

<ul>
<li>metro :metropolitan railway  城市铁路（法国）</li>
<li>subway: 地下通道</li>
<li>tube:  管道(英国)</li>
<li>underground: 地下(英国)</li>
</ul>


<h2>路</h2>

<ul>
<li>avenue: 大街，林荫大道,引申为(达到某物的)方法、途径、手段

<ul>
<li>avenue to success:成功之道</li>
<li>explore eve avenue 想尽一切办法</li>
<li>the other end of the Avenue 白宫，国会各在Avenue的一头</li>
</ul>
</li>
<li>alley: 小巷，小径，胡同</li>
<li>intersection:交叉路口;</li>
<li>HWY:  highway 公路；高速公路</li>
<li>pedestrian street/mall 步行街</li>
<li>lane: （乡间）小路；车道

<ul>
<li>fast lane:快车道</li>
<li>bus lane:公共汽车专用车道</li>
</ul>
</li>
</ul>


<h2>旅游</h2>

<ul>
<li><p>tourist: 游客，旅游的，二等舱、经济舱的</p>

<ul>
<li>tour group:旅行团</li>
<li>tour guide:导游</li>
<li>eco tour:生态旅游</li>
</ul>
</li>
<li>trip: 旅行，远足，绊倒，犯错

<ul>
<li>tripper: 旅行者</li>
<li>field trip: 实地考察，野外旅游</li>
<li>business trip: 出差，商务旅行</li>
<li>on a trip :在旅行中</li>
</ul>
</li>
<li><p>journey:旅行，行程，(心路)历程</p>

<ul>
<li>break one’s journey at 在&hellip;中途下车</li>
<li>long journey 长途旅行</li>
<li>journey to the west 西游记</li>
<li>on the journey 在旅程中</li>
<li>sweet journey 甜蜜之旅</li>
<li>soul journey 灵魂之旅</li>
</ul>
</li>
<li>travel: 旅行

<ul>
<li>travel light: 轻装旅行</li>
<li>travels in the blue 沉思，冥想</li>
</ul>
</li>
<li>excursion 短途旅行，远足

<ul>
<li>excursionist 远足者</li>
</ul>
</li>
<li>sightseer 观光客，游客

<ul>
<li>sightseer lounge car 观景车厢</li>
</ul>
</li>
<li>rubberneck:  伸长脖子观看、观光者、游览者、好事者

<ul>
<li>rubberneck bus 观光巴士</li>
</ul>
</li>
<li>hike:远足，徒步旅行

<ul>
<li>on the hike 流浪、流亡</li>
</ul>
</li>
<li>backpacker: 背包客</li>
<li>itinerary: 路线；旅行计划；旅行记录；旅程的；巡回的；</li>
<li>expedition:（以探险等为目的的）有组织的旅行、探险、考察、出征；（以探险等为目的的）旅行队、考察队、探险队；远足、短程旅行；迅速（办理），动作敏捷。

<ul>
<li>go to a fishing expedition:摸底、试探(某些国家渔船以打渔为名驶进外国领海收集情报)</li>
<li>use expedition:赶快办理，从速行动</li>
<li>with expedition: 很快的，迅速的</li>
<li>Northern Expedition:北伐，北伐战争</li>
<li>one in a lifetime expedition: 一生只有一次的探险</li>
</ul>
</li>
<li>baggage:行李、（旅行时携带的）皮箱、手提箱；（军队）的辎重、军用行李、携带的装备；（探险队的）装备；（感情或思想上的）包袱

<ul>
<li>baggage claim:行李提领处</li>
<li>baggage elevator:行李电梯</li>
<li>excesss baggage:超重行李；累赘</li>
<li>hand baggage:手提行李</li>
</ul>
</li>
<li>luggage:行李

<ul>
<li>luggage office:行李暂存处；行李寄存处；行李托运处</li>
<li>luggage tag:行李牌；行李签</li>
<li>luggage locker:行李寄存箱；行李柜；</li>
<li>hand luggage:手提行李</li>
<li>carry-on luggate:随身携带的行李</li>
<li>luggage rack:行李架</li>
</ul>
</li>
<li>carpool:拼车、拼车旅行的人；（公司或机构供员工使用的）车队；</li>
</ul>


<h1>吃</h1>

<h2>食物</h2>

<ul>
<li>dessert:餐后甜点</li>
<li>pastry: 油酥面团，油酥糕点</li>
<li>brunch:早午餐</li>
<li>salami:意大利蒜味腊肠</li>
<li>meatloaf:烘肉卷；肉饼</li>
<li>aioli:蒜味蛋黄酱(调味剂)</li>
<li>bun:小圆面包</li>
<li>steamed bun:馒头</li>
<li>steamed  stuffed bun:包子</li>
<li>syrup: 糖浆</li>
<li>papaya :木瓜</li>
<li>pumpkin:  南瓜</li>
<li>swede: 甘蓝 ；瑞典的</li>
<li>chilli:辣椒

<ul>
<li>chilli powder:辣椒粉；干辣椒粉</li>
<li>chilli red:辣椒红；椒红</li>
<li>red chilli:红辣椒；小红尖椒；</li>
<li>chilli sauce:辣椒酱；辣酱油</li>
</ul>
</li>
<li>pepper:胡椒；椒类；加胡椒粉于;雨点般的撒、密布；（以小物体）大量击中、密击、连续打击

<ul>
<li>take pepper in the nose/grow pepper:发怒、发脾气、勃然大怒</li>
<li>red pepper:红椒；红辣椒；红胡椒</li>
<li>bell pepper:菜椒；灯笼椒；柿子椒；</li>
<li>Serrano pepper:塞拉诺辣椒</li>
</ul>
</li>
<li>shrimp:小虾；矮小的人；捕虾；虾制的

<ul>
<li>shrimp paste:虾酱</li>
<li>dried shrimp:干小虾；海米</li>
</ul>
</li>
<li>prawn:虾(尤指对虾 Penaeus)

<ul>
<li>prawn cracker:虾片、虾球、龙虾片</li>
<li>fried prawn:炸大虾；白灼中虾</li>
</ul>
</li>
<li>batata:白薯、山芋</li>
<li>pasty:苍白的；馅饼</li>
<li>mayonnaise:蛋黄酱（美乃滋）</li>
<li>spicy:辛辣的、加有香料的

<ul>
<li>spicy girl: 辣妹</li>
<li>spicy food:辛辣的事物</li>
</ul>
</li>
<li><p>mustard:芥末、芥末酱、芥菜；褐黄色的、芥末黄</p>

<ul>
<li>mustard plant:芥菜类蔬菜</li>
<li>mustard oil:芥子油</li>
<li>mustard seed:芥菜籽</li>
<li>mustard sauce:黄芥末酱</li>
</ul>
</li>
<li><p>smorgasbord:(瑞典式)自助餐，引申为大杂烩</p></li>
<li>buffet: 自助餐、餐饮部；击打、搏斗</li>
<li>vinegar:醋；尖酸、刻薄；活力、精力；</li>
</ul>


<h2>葡萄酒</h2>

<ul>
<li>vineyard:葡萄庄园，酒庄</li>
<li>Pinot: 皮诺(葡萄品种)；皮诺酒</li>
<li>Cabernet:赤霞珠(葡萄品种)</li>
<li>Merlot:梅洛(葡萄品种)</li>
</ul>


<h1>穿</h1>

<h2>家居</h2>

<ul>
<li>blanket:毯子；覆盖物；覆盖

<ul>
<li>rubber blanket:橡胶垫；橡皮布</li>
<li>wet blanket:扫兴的人；扫兴的事；湿毯子；</li>
<li>sludge blanket:污泥层；污泥浮层</li>
</ul>
</li>
</ul>


<h1>生物</h1>

<h2>植物</h2>

<ul>
<li>balsa: 热带美洲轻木(用于制作模型)；巴尔沙树</li>
</ul>


<h2>动物</h2>

<ul>
<li>mole:痣；鼹鼠；（政府或机构中的）间谍、长期潜伏的间谍、在暗处工作的人；

<h3>鸟</h3></li>
<li>sparrow :麻雀</li>
<li>swan: 天鹅</li>
<li>dove:鸽子</li>
<li>seagull: 海鸥</li>
<li>egret: 白鹭，同aigrette</li>
<li></li>
</ul>


<h3>昆虫</h3>

<ul>
<li>dragonfly: 蜻蜓</li>
</ul>


<h3>水生物</h3>

<ul>
<li>shellfish:甲壳类水生动物</li>
<li>oyster:牡蛎，蚝；

<ul>
<li>the world is someone’s oyster:某人可以随心所欲</li>
</ul>
</li>
<li>turtle: 龟，甲鱼；</li>
</ul>


<h3>猿</h3>

<ul>
<li>ape:猿，引申为模仿，狂热</li>
<li>gorilla:大猩猩</li>
<li>chimpanzee:黑猩猩</li>
<li>primate:灵长类；大主教</li>
</ul>


<h1>住</h1>

<h2>房子、建筑</h2>

<ul>
<li>garage: 车库、飞机库;汽车修理厂;加油站(兼营汽车修理、销售)</li>
<li>cabin: (森林或山上的)小木屋；船舱；机舱</li>
<li>inn:(乡间的)客栈，小酒馆，小餐厅</li>
<li>lodge:(乡野度假的、猎人居住的)屋舍，旅馆；（庄园宅第、工厂、大学等的）门房；正式提出(抗议、投诉、指控、要求)；暂住；租住

<ul>
<li>lodge a claim:提出索赔</li>
<li>lodge a complaint 投诉</li>
</ul>
</li>
<li>residence: 住宅，住所；居住

<ul>
<li>of no fixed residence:无固定住处的</li>
<li>in residence: (公务人员、官员)住在官邸的；（大学师生员工）住校的</li>
</ul>
</li>
<li>accommodation: 住所;(楼内或车内的)专用空间；适应，调整；(社会不同集团间的)调和、调解；（纠纷）解决、妥协；

<ul>
<li>come to an accommodation:达到和解、妥协</li>
<li>accommodation space:起居舱室</li>
<li>hostel accommodation 宿舍单位</li>
</ul>
</li>
<li>hostel: (流浪者等的)过夜住宿处、临时收容所、慈善收容所；(青年)旅社(youth hostel)；（新移民临时的）住宿处；（徒步）旅行、投宿（招待所等）;</li>
<li>motel: 汽车旅馆 （同 motorist&rsquo;s hotel ）</li>
<li>castle:城堡;安全地带、藏身之处;(国际象棋)车王易位

<ul>
<li>air castle:空中楼阁</li>
</ul>
</li>
<li>chamber:（身体或器官内的）室、膛；<code>会议厅、（官邸的）接待室、（作特殊用途的）房间、房间（尤指卧室、寝室）；议院；室内的、小型的(音乐)；把...关进房间、禁闭；</code>把（弹药）装入枪膛

<ul>
<li>chamber of commerce:商会</li>
<li>conbustion chamber:[机]燃烧室</li>
<li>red chamber: (加拿大议会)参议院</li>
</ul>
</li>
<li>venue:举办场所;(法)犯罪地点、审批场所；（事情的）发生地点、现场；（争论中所采取的）立场

<ul>
<li>outdoor venue:户外场地</li>
<li>virtual venue:虚拟灰常</li>
<li>religious venue:宗教场所</li>
</ul>
</li>
<li>lounge:休息室、休息厅、等候大厅(机场)、起居室；躺椅；闲逛、懒洋洋躺卧、闲混；虚度光阴

<ul>
<li>lounge music:沙发音乐；酒吧音乐</li>
<li>cocktail lounge:鸡尾酒会；酒廊；鸡尾酒廊；鸡尾酒餐厅</li>
<li>lobby lounge:大堂酒廊；大堂酒吧</li>
<li>departure lounge:候机厅；启程处</li>
</ul>
</li>
<li>penthouse:小棚屋、（尤指靠在大楼边上打的）披屋；屋顶房间、（豪华的）顶层公寓；电梯机器房、屋顶棚

<ul>
<li>make a penthouse of the eyebrows 皱眉头</li>
<li>penthouse suite:楼顶套房、豪华套房</li>
<li>penthouse garden:阁楼庭园</li>
</ul>
</li>
<li>closet:储藏室；壁橱、衣橱、碗橱；议事室；密室、小房间、小私室；私密的、私下的、秘密的、非公开的；空谈的、纸上谈兵的、不切实际的；把&hellip;关在密室

<ul>
<li>water closet:厕所(WC)</li>
</ul>
</li>
</ul>


<h1>未分类</h1>

<h2>颜色</h2>

<ul>
<li>crimson: 深红色，引申为血淋淋的，血腥的</li>
<li>mustard: 芥末黄</li>
</ul>


<h2>机密</h2>

<ul>
<li>confidential: 保密的(信息)；悄悄的(说话)

<ul>
<li>confidential information:机密情报</li>
</ul>
</li>
<li>classified: 机密的(信息)；分类的，分级的

<ul>
<li>classified information: 机密情报</li>
</ul>
</li>
</ul>


<h2>摄影</h2>

<ul>
<li>photon:光子，辐射量子</li>
<li>aperture: 孔隙；（相机镜头的）孔径、光圈；</li>
<li>SLR &ndash; Single-Lens reflex camera  单反</li>
</ul>


<h2>物理化学名词</h2>

<ul>
<li>atom:原子</li>
<li>electron:电子(负电荷)</li>
<li>proton:质子 （正电荷）</li>
<li>photon:光子，辐射量子</li>
<li>neutron:中子 (无电荷)</li>
<li>neutrino: 微中子/中微子</li>
<li>nucleus: 原子核</li>
<li>fission: 裂变</li>
<li>sodium:钠(11号化学元素,Na)</li>
<li>natrium:纳(11号化学元素,Na)</li>
<li>chlorine:氯(17号化学元素 CI)</li>
<li>chloride:氯化物</li>
<li>silica:二氧化硅；硅土

<ul>
<li>silica gel: 硅胶</li>
</ul>
</li>
<li>silicate:硅酸盐</li>
<li>aluminum:铝

<ul>
<li>aluminum alloy:铝合金</li>
<li>aluminum foil:铝箔</li>
</ul>
</li>
<li>calcium:钙(Ca)</li>
<li>copper: 铜(化学元素Cu);铜币；铜制的；铜色的；用铜皮包、盖、镀铜；警察

<ul>
<li>a copper caption:冒充有地位的人；伪船长</li>
<li>hot copper:酒醉后的口干舌燥</li>
<li>cool one‘s coppers:喝解酒饮料润喉</li>
<li>copper mine:铜矿</li>
</ul>
</li>
<li>tin:锡(化学元素Sn)；锡制的、镀锡的；冒牌的、无价值的、卑贱的；结婚十周年；马口铁罐、马口铁器皿、金属罐、罐中之物；把食品装罐、罐装

<ul>
<li>live out of tins(cans):靠罐头食品过日子</li>
<li>on the tin:使用警徽的（指凭此可得到免费用餐等特殊照顾）</li>
<li>straight from the tin:新鲜的、第一手的、原来的</li>
<li>tin wedding:十周年锡婚</li>
</ul>
</li>
</ul>


<h1>拼写类似词</h1>

<ul>
<li>tatoo: 纹身</li>
<li><p>taboo: 禁忌</p></li>
<li><p>stub: 桩、残端、存根(票，支票)</p></li>
<li>stab: 刺、捅</li>
<li>snob:  自命不凡的人，势利小人</li>
<li>nob: 大人物，上流人物，规则</li>
<li>mob: 暴民，乱民，犯罪团伙；围攻 （mobster:暴徒  mobocracy:暴民统治）</li>
<li><p>rob: 抢劫、盗窃，抢走，剥夺 （robbery:抢劫）</p></li>
<li><p>rage: 愤怒；肆虐、狂暴、猛烈(风、浪、火等)；猖獗、流行（灾难、病等）；发怒，怒斥(boil with rage:怒火中烧 fly into a rage:勃然大怒)</p></li>
<li>roger: 好，知道了</li>
<li>rogue: 流氓；淘气鬼；行为异常的；劣种(植物)</li>
<li><p>ranger: 护林员；公园管理员；突击队（同commando）</p></li>
<li><p>crew: 全体船员，机组人员,一组工作人员</p></li>
<li>crowd:人群，聚集</li>
<li>crown:王冠，花冠，王权，加冕</li>
<li><p>drown:溺死、淹死;淹没于(强调);(一声音)盖过(另一声音);驱散、消除、摆脱、消(愁）、解(闷)</p></li>
<li><p>college: 大学；学院</p></li>
<li><p>colleague: 同事</p></li>
<li><p>civil: 民众的；民用的；民政的；民事的；社会的，国内的；公民的，市民的；民间的、文职的(与军人、圣职相区别) （civil servant: 公务员  civil law 民法 civil aviation 民用航空）</p></li>
<li><p>citizen:公民、国民；市民、城镇居民；（second-class citizen 次等公民 senior citizen 老年人 fellow citizen 各位公民，同胞）</p></li>
<li><p>desert: 沙漠</p></li>
<li><p>dessert: 餐后甜点</p></li>
<li><p>liberty: 自由(生活)、人身自由、获得许可</p></li>
<li>bribery: 行贿；受贿</li>
<li><p>deliberate: 故意的；深思熟虑的;谨慎的</p></li>
<li><p>moral:道德；道德的；有道德的，品行端正的；道德上的教训，寓意；（moral education:道德教育； moral hazard:道德危机,投保人不可靠引发的）</p></li>
<li>morality: 道德观念；道德规范；</li>
<li>morale: 士气、斗志；道德、品行；</li>
<li>demoralize: 使泄气、沮丧、失去信心、士气低落；使道德败坏、堕落；</li>
<li>mortal: 终有一死的；凡人的、普通人的、人类的；人世的、现世的</li>
<li><p>mortality:死亡数；死亡率</p></li>
<li><p>worrisome: 令人担心的；使人烦恼的、使人焦虑的；容易烦恼的</p></li>
<li><p>awesome: 令人畏惧的、敬畏的；棒极了</p></li>
<li><p>mandate: (政府或机构经选举而获得的，个人所获得的)授权；任期；(上级法院给下级法院的)指令
              legislation mandate: 立法委任权</p></li>
<li><p>mundane:平凡的、单调的；平凡的事物、单调的事物； mundane world:红尘、世俗社会；</p></li>
<li><p>clash: 冲突、碰撞</p></li>
<li>crash: 坠毁</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbolicatecrash]]></title>
    <link href="http://xuguoxing.github.io/blog/2015/01/22/symbolicatecrash/"/>
    <updated>2015-01-22T10:47:18+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2015/01/22/symbolicatecrash</id>
    <content type="html"><![CDATA[<p><code>symbolicatecrash</code>是Xcode自带的分析工具，使用crash log文件和.dSYM文件可将crash log中的地址替换为代码位置。</p>

<h2>查找<code>symbolicatecrash</code></h2>

<p>查找Xcode安装路径</p>

<pre><code>$ xcode-select -p
/Applications/Xcode.app/Contents/Developer
</code></pre>

<p>搜索<code>symbolicatecrash</code></p>

<pre><code>$ find /Applications/Xcode.app -name "symbolicatecrash"
/Applications/Xcode.app/Contents/SharedFrameworks/DTDeviceKitBase.framework/Versions/A/Resources/symbolicatecrash
</code></pre>

<h2>解析crash log</h2>

<p>将symbolicatecrash、crash log、.dSYM文件拷贝到同一目录，命令行执行</p>

<pre><code>./Symbolicatecrash aa.crash bb.dSYM &gt; cc.log
</code></pre>

<p>将解析后的crash log输出到cc.log文件中</p>

<p>注:若有提示&#8221;Error: &ldquo;DEVELOPER_DIR&rdquo; is not defined&#8221;,则设置</p>

<pre><code>$ export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
</code></pre>

<h2>检查.app文件、.dSYM文件和crash log是否对应的方法</h2>

<pre><code>$ dwarfdump --uuid MyApp.app/MyApp
UUID: CC67C4BF-16E7-3512-8E03-10FCFEB5AE5A (armv7) MyApp.app/MyApp
$ dwarfdump --uuid MyApp.app.dSYM/
UUID: CC67C4BF-16E7-3512-8E03-10FCFEB5AE5A (armv7) MyApp.app.dSYM/Contents/Resources/DWARF/MyApp
</code></pre>

<p>检查上述两个UUID与crash log中的&#8221;slice_uuid&#8221;字段是否一致。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.cnblogs.com/ydhliphonedev/archive/2012/12/07/2806866.html">iphone崩溃日志分析工具symbolicatecrash用法</a></li>
<li><a href="http://ios-iphone.diandian.com/post/2012-05-18/19440182">iOS系统Crash文件分析方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/10/23/cocoapods/"/>
    <updated>2014-10-23T10:58:20+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/10/23/cocoapods</id>
    <content type="html"><![CDATA[<p>CocoaPods是个针对iOS和OS X应用的类库依赖管理工具。在CocoaPods架构中有三种角色: 类库(Pods), 类库描述仓库(Pod Repo),项目。</p>

<h2>下载cocoapods命令行工具</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install cocoapods //下载最新版
</span><span class='line'>gem install cocoapods —version 0.33.1  //下载指定版本</span></code></pre></td></tr></table></div></figure>


<p>如果ruby官方库下载不下来，可以切换成淘宝的源</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<h2>Pod Repo库</h2>

<h2>参考</h2>

<ul>
<li><a href="http://www.objc.io/issue-6/cocoapods-under-the-hood.html">CocoaPods Under The Hood</a></li>
<li><a href="http://nshipster.com/cocoapods/">Cocoa​Pods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosts]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/08/18/hosts/"/>
    <updated>2014-08-18T16:08:24+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/08/18/hosts</id>
    <content type="html"><![CDATA[<p>在开发过程中，经常需要修改Hosts访问测试环境，而对于非越狱iOS设备，无法修改设备Host文件<code>/etc/hosts</code>;如果在代码中直接将域名修改为ip地址，存在两个问题：</p>

<ol>
<li>破坏了网络代码的结构。</li>
<li>HTTP Header中的&#8221;Host&#8221;字段也被修改为了ip地址，而后台对&#8221;Host&#8221;字段有校验,会导致请求出错。</li>
</ol>


<p>可以通过对<code>NSURLRequest</code>的<code>initWithURL:cachePolicy:timeoutInterval:</code>方法和<code>NSMutableURLRequest</code>的<code>setURL:</code>方法进行
method swizzle来动态的将URL中的host修改为ip,并保持HTTP Header中的&#8221;Host&#8221;字段不变来解决。</p>

<h2>使用NLHosts类来保存host到ip的转换</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface NLHosts : NSObject
</span><span class='line'>
</span><span class='line'>+(NSString*)ipByHost:(NSString*)host;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p><code>+ipByHost:</code>方法接收host参数，如果对应host有匹配的ip地址,则返回ip地址，否则返回nil。</p>

<h2><code>NSURLRequest</code>、<code>NSMutableURLRequest</code>的method swizzle处理</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface NSURLRequest (Swizzle)
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@interface NSMutableURLRequest (Swizzle)
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "NSURLRequest+Swizzle.h"
</span><span class='line'>
</span><span class='line'>#import &lt;objc/runtime.h&gt;
</span><span class='line'>#import "NLHosts.h"
</span><span class='line'>
</span><span class='line'>@implementation NSURLRequest (Swizzle)
</span><span class='line'>
</span><span class='line'>+(void)load
</span><span class='line'>{
</span><span class='line'>    static dispatch_once_t onceToken;
</span><span class='line'>    dispatch_once(&onceToken, ^{
</span><span class='line'>        Class clazz = NSClassFromString(@"NSURLRequest");
</span><span class='line'>        Method origMethod = class_getInstanceMethod(clazz, @selector(initWithURL:cachePolicy:timeoutInterval:));
</span><span class='line'>        Method newMethod = class_getInstanceMethod(clazz, @selector(initWithNewURL:cachePolicy:timeoutInterval:));
</span><span class='line'>
</span><span class='line'>        if (origMethod && newMethod) {
</span><span class='line'>            method_exchangeImplementations(origMethod, newMethod);
</span><span class='line'>        }else{
</span><span class='line'>            //NSLog(@"origMethod:%@ newMethod:%@",origMethod,newMethod);
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(id)initWithNewURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval
</span><span class='line'>{
</span><span class='line'>    NSString *scheme = URL.scheme;
</span><span class='line'>
</span><span class='line'>    if ([scheme compare:@"http" options:NSCaseInsensitiveSearch] == NSOrderedSame || [scheme compare:@"https" options:NSCaseInsensitiveSearch] == NSOrderedSame) {
</span><span class='line'>        NSString *host = URL.host;
</span><span class='line'>        NSString *ip = [NLHosts ipByHost:host];
</span><span class='line'>        if (ip) {
</span><span class='line'>            //NSLog(@"NSURLRequest: host:%@-&gt;ip:%@",host,ip);
</span><span class='line'>            NSString *absoluteString = [URL absoluteString];
</span><span class='line'>            NSRange hostRange = [absoluteString rangeOfString:host];
</span><span class='line'>            if (hostRange.location != NSNotFound) {
</span><span class='line'>                absoluteString = [absoluteString stringByReplacingCharactersInRange:hostRange withString:ip];
</span><span class='line'>                NSURL *newURL = [NSURL URLWithString:absoluteString];
</span><span class='line'>                NSMutableURLRequest *newRequest = [[NSMutableURLRequest alloc]initWithURL:newURL cachePolicy:cachePolicy timeoutInterval:timeoutInterval];
</span><span class='line'>                [newRequest setValue:host forHTTPHeaderField:@"Host"];
</span><span class='line'>                self = newRequest;
</span><span class='line'>                return self;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return [self initWithNewURL:URL cachePolicy:cachePolicy timeoutInterval:timeoutInterval];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@implementation NSMutableURLRequest (Swizzle)
</span><span class='line'>
</span><span class='line'>+(void)load
</span><span class='line'>{
</span><span class='line'>    static dispatch_once_t onceToken;
</span><span class='line'>    dispatch_once(&onceToken, ^{
</span><span class='line'>        Class clazz = NSClassFromString(@"NSMutableURLRequest");
</span><span class='line'>        Method origMethod = class_getInstanceMethod(clazz, @selector(setURL:));
</span><span class='line'>        Method newMethod = class_getInstanceMethod(clazz, @selector(setNewURL:));
</span><span class='line'>
</span><span class='line'>        if (origMethod && newMethod) {
</span><span class='line'>            method_exchangeImplementations(origMethod, newMethod);
</span><span class='line'>        }else{
</span><span class='line'>            NSLog(@"origMethod:%@ newMethod:%@",origMethod,newMethod);
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void)setNewURL:(NSURL *)URL
</span><span class='line'>{
</span><span class='line'>    NSString *scheme = URL.scheme;
</span><span class='line'>
</span><span class='line'>    if ([scheme compare:@"http" options:NSCaseInsensitiveSearch] == NSOrderedSame || [scheme compare:@"https" options:NSCaseInsensitiveSearch] == NSOrderedSame) {
</span><span class='line'>        NSString *host = URL.host;
</span><span class='line'>        NSString *ip = [NLHosts ipByHost:host];
</span><span class='line'>        if (ip) {
</span><span class='line'>            //NSLog(@"NSMutableURLRequest setURL: host:%@-&gt;ip:%@",host,ip);
</span><span class='line'>            NSString *absoluteString = [URL absoluteString];
</span><span class='line'>            NSRange hostRange = [absoluteString rangeOfString:host];
</span><span class='line'>            if (hostRange.location != NSNotFound) {
</span><span class='line'>                absoluteString = [absoluteString stringByReplacingCharactersInRange:hostRange withString:ip];
</span><span class='line'>                NSURL *newURL = [NSURL URLWithString:absoluteString];
</span><span class='line'>                [self setNewURL:newURL];
</span><span class='line'>                [self setValue:host forHTTPHeaderField:@"Host"];
</span><span class='line'>                return;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return [self setNewURL:URL];
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p>在<code>NSURLRequest</code>类的<code>+load</code>方法中将<code>-initWithURL:cachePolicy:timeoutInterval:</code>替换为<code>initWithNewURL:cachePolicy:timeoutInterval:</code>;</p>

<p>在<code>initWithNewURL:cachePolicy:timeoutInterval:</code>方法中，如果初始化URL中的host需要转换为ip地址，则使用ip地址替换host生成新的URL,使用新URL生成新的
<code>NSMutableURLRequest</code>,并设置其HTTP Header的&#8221;Host&#8221;字段为原始值，将此<code>NSMutableURLRequest</code>返回进行后续网络请求。</p>

<p><code>NSMutableURLRequest</code>是<code>NSURLRequest</code>的子类，所以初始化方法在<code>NSURLRequest</code>中进行method swizzle替换后，同样可适用在<code>NSMutableURLRequest</code>。
这样在<code>initWithNewURL:cachePolicy:timeoutInterval:</code>中生成新的<code>NSMutableURLRequest</code>时同样也会调用swizzle过的初始化方法，但此时的
host已经是ip地址了，不需要再次进行转换，会直接调用原方法返回。</p>

<p>对<code>NSMutableURLRequest</code>类的<code>-setURL:</code>方法也需要进行类似的处理,具体见代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EXCLUDED_SOURCE_FILE_NAMES]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/08/16/excluded-source-file-names/"/>
    <updated>2014-08-16T14:03:01+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/08/16/excluded-source-file-names</id>
    <content type="html"><![CDATA[<p>在Xcode中可以通过名为<code>EXCLUDED_SOURCE_FILE_NAMES</code>的用户自定义(User-Defined) build setting来配置在某些Configurations下进行构建
不包含的文件。</p>

<p>比如，在Debug环境下会包含用于测试的桩文件，而在发布版本Release环境中不应该包含。</p>

<h2>设置方法</h2>

<p>在Target的<code>Build Settings</code>中滑到最下面，可看到<code>User-Defined</code>区域。</p>

<p><img src="http://xuguoxing.github.io/images/2014/08/User_Defined.png"></p>

<p>在<code>Build Settings</code>顶部点击<code>+</code>号，选择&#8221;Add User-Defined Setting&#8221;
<img src="http://xuguoxing.github.io/images/2014/08/Add_User_Defined.png"></p>

<p>在&#8221;User-Defined&#8221;区域添加名为<code>EXCLUDED_SOURCE_FILE_NAMES</code>设置项，并在Release配置下，添加需要Exlclude的文件名，支持通配符，以空格分隔。</p>

<p><img src="http://xuguoxing.github.io/images/2014/08/Add_User_Defined_OK.png"></p>

<h2>参考</h2>

<ul>
<li><a href="http://lists.apple.com/archives/xcode-users/2009/Jun/msg00153.html">Re: Conditional include based on configuration</a></li>
<li><a href="http://twobitlabs.com/2012/01/excluding-files-from-production-xcode-builds/">Slim down your iOS app by excluding files from production builds</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/06/09/jenkins/"/>
    <updated>2014-06-09T16:20:42+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/06/09/jenkins</id>
    <content type="html"><![CDATA[<h1>持续集成(CI)介绍</h1>

<p>持续集成自动从代码服务器拉取代码，完成自动编译、测试、分发和部署等工作；出现错误时及时通知开发人员，使问题可以立即得到解决，降低项目风险。</p>

<p><a href="http://jenkins-ci.org/">Jenkins</a>是一款很流行的持续集成工具，配置简单，结合一些插件和命令行工具可以完成很多工作。</p>

<p>Mac系统同样有一款持续集成工具<code>OS X Server</code>，配置简单，但功能无法扩展，其只能自动完成编译构建、静态代码分享、运行单元测试和打包归档四个工作。</p>

<h1>Jenkins安装与配置</h1>

<h2>安装</h2>

<ol>
<li>从<a href="http://jenkins-ci.org/">官网</a>下载Mac OS X的安装包</li>
<li>执行安装程序后会创建<code>jenkins</code>用户，主目录位于<code>/Users/Shared/Jenkins</code>；Jenkins以系统守护进程方式运行,可查看
<code>/Library/LaunchDaemons/org.jenkins-ci.plist</code>配置文件了解详细信息。</li>
<li><code>Jenkins</code>默认无密码，可使用“sudo passwd jenkins”命令设置密码</li>
<li>打开Jenkins管理页面 <code>http://localhost:8080/</code>，端口默认为8080，可在管理页面修改。</li>
</ol>


<h2>安全设置</h2>

<p><code>系统管理</code>&ndash;><code>Configure Global Security</code>，默认<code>启用安全</code>没有勾选。</p>

<ol>
<li>勾选<code>启用安全</code></li>
<li><code>安全域</code>中选择<code>Jenkins专有项目数据库</code>，并勾选<code>允许用户注册</code>。</li>
<li><code>授权策略</code>中选择<code>项目矩阵授权策略</code>; 设置<code>匿名用户</code>为<code>Read</code>权限;添加一个用户名，给予全部权限(该用户稍后创建)。</li>
<li>重启Jenkins, <a href="http://localhost:8080/restart">http://localhost:8080/restart</a></li>
<li>重启后使用<code>Login-&gt;create an account</code>使用之前输入的用户名创建账号。</li>
</ol>


<p><img src="images/2014/06/jenkins_security.png"></p>

<p>在错误的设置安全域、授权策略时，会无法登录到Jenkins管理页面修改配置，可通过下面的方法修复。</p>

<ol>
<li>停止Jenkins(杀进程)</li>
<li>在<code>$JENKINS_HOME</code>目录(通常为<code>/Users/Shared/Jenkins/Home</code>)中找到config.xml文件</li>
<li>打开此文件，将<code>&lt;useSecurity&gt;true&lt;/useSecurity&gt;</code>的true修改为false</li>
<li>删除<code>authorizationStrategy</code>、<code>securityRealm</code>节点</li>
<li>重启Jenkins，这时会恢复到没有<code>启用安全</code>的情况。</li>
</ol>


<h2>安装插件</h2>

<p>在<code>系统管理-&gt;管理插件</code>中可安装必要的插件。</p>

<p>我们需要安装git插件<code>Git Client Plugin</code>、<code>Git Server Plugin</code>，
Xcode插件<code>Xcode integration</code>。</p>

<h2>启动、关闭与重启</h2>

<p>对于登录用户，可以直接使用Jenkins的管理url。</p>

<pre><code>http://localhost:8080/exit
http://localhost:8080/restart
http://localhost:8080/reload
</code></pre>

<p>杀掉jenkins进程</p>

<pre><code>ps -e | grep jenkins
  53 ?? 0:02.51 /usr/bin/java -jar /Applications/Jenkins/jenkins.war
  392 ttys000 0:00.00 grep jenkins
sudo kill 53
</code></pre>

<p>使用<code>launchctl</code></p>

<pre><code>sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
</code></pre>

<h1>自动化构建</h1>

<p>在Jenkins中，任务是以<code>Job</code>为单位的，在管理页面点击<code>新建</code>，输入Item名称，
并选择项目类型为<code>构建一个自由风格的软件项目</code>，点击OK后就进入了Job设置页面。</p>

<h2>源码管理</h2>

<p>可以根据需要设置从<code>svn</code>或者<code>git</code>获取源码。</p>

<p>对于git需要设置</p>

<ul>
<li>Repository URL: 仓库URL</li>
<li>Credentials: 用户名、密码</li>
<li>Branches to build:需要构建的分支</li>
<li>Additional Behaviours:其它需要执行的git操作,在必要的时候可以设置。</li>
</ul>


<p>对于svn需要设置</p>

<ul>
<li>Repository URL: 仓库URL</li>
<li>Credentials: 用户名、密码</li>
<li>Check-out Strategy: check-out的策略，可以直接<code>svn update</code>、在update之前执行<code>svn revert</code>或者获取一份全新的拷贝。</li>
</ul>


<h2>构建触发器</h2>

<p>设置构建触发条件,其中<code>Build periodically</code>可以在指定的时间触发构建，在进行每日构建时可以设置，构建时间使用类cron的语法。</p>

<p>也可以不设置触发器，手工触发构建任务。</p>

<h2>构建</h2>

<p>在构建步骤中可以使用<code>Exeute shell</code>执行任意构建任务，对于iOS项目，我们可以使用<code>Xcode</code>插件简化构建流程。</p>

<h3>Xcode</h3>

<h4>General build settings</h4>

<p>指定需要构建的target，不指定会构建所有的targets；在<code>Setting</code>中还有一系列构建的设置。</p>

<ul>
<li><code>Clean before build?</code> 在build前是否先clean</li>
<li><code>Generate Archive?</code> 是否生成<code>xcarchive</code>文件</li>
<li><code>Configuration</code> 构建使用的配置</li>
<li><p><code>Pack application and build .ipa?</code> 是否打包ipa文件.</p>

<p>若选择打包ipa文件，则还需要设置ipa文件名pattern，在名称中可使用:</p>

<ul>
<li>版本号 <code>${SHORT_VERSION}</code>,</li>
<li>build号 <code>${VERSION}</code></li>
<li>构建日期 <code>${BUILD_DATE}</code>,日期格式为<code>yyyy.MM.dd</code></li>
</ul>


<p>  比如可设置为<code>MyApp_${SHORT_VERSION}_build${VERSION}_${BUILD_DATE}</code>，那么生成的文件名格式为<code>MyApp_v1.0_build10_2014.05.17.ipa</code>。</p></li>
<li><p><code>Output directory</code> 相对于<code>build</code>目录的ipa文件生成目录。</p></li>
</ul>


<h4>Code signing &amp; OS X keychain options</h4>

<p>代码签名及KeyChain设置</p>

<ul>
<li><p><code>Code Signing Identity</code> 用于签名的开发者标识，可以在keychain中查看,名称格式为&#8221;iPhone Developer: your_name (XXXXXXX)&#8221;</p></li>
<li><p><code>Unlock Keychain?</code> 解锁keychain，设置<code>Keychain path</code>与<code>Keychain password</code>，<code>Keychain path</code>设置为
<code>${HOME}/Library/Keychains/login.keychain</code>。</p></li>
</ul>


<p>注:Jenkins以<code>jenkins</code>用户运行，其用户目录在<code>/Users/Shared/Jenkins</code>，若Jenkins在开发电脑上安装，实际上Xcode编译所需要的
keychain、Provisioning Profiles等信息都在原登录用户下，自动构建时就会报代码签名错误。可通过以下步骤解决:</p>

<ol>
<li><p>在&#8221;Keychain Access&#8221;应用中将开发者证书从&#8221;login&#8221;拷贝到&#8221;sysmtem&#8221;。</p>

<p>在&#8221;Keychain Access&#8221;中的login tab中，右键点击证书“iPhone Developer: your_name (XXXXXXX)”,选择“拷贝xxxx”；然后在system tab中右键点击，选择&#8221;粘贴2项&#8221;。</p></li>
<li><p>将主用户目录下的<code>KeyChains</code>目录拷贝到jenkins用户目录下</p></li>
</ol>


<p>  <code>/Users/YourName/Library/Keychains</code>&ndash;><code>/Users/Shared/Jenkins/Library/Keychains</code></p>

<ol>
<li>将主用户目录下的<code>MobileDevice</code>目录拷贝到jenkins用户目录下，<code>MobileDevice</code>中有<code>Devices</code>和<code>Provisioning Profiles</code>两个子目录。</li>
</ol>


<p>  <code>/Users/YourName/Library/MobileDevice</code>&ndash;><code>/Users/Shared/Jenkins/Library/MobileDevice</code></p>

<h3>Execute shell</h3>

<p>可以在构建步骤中的任意位置执行脚本，比如在Xcode插件之前执行脚本设置必要的编译环境，执行单元测试，在Xcode插件打包ipa文件后，
将文件上传到后台服务部署分发等。</p>

<p>比如，可增加&#8221;Execute shell&#8221;将打包文件上传后台服务器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>buildDate=`date +%Y.%m.%d`
</span><span class='line'>version=`/usr/libexec/PlistBuddy -c "Print CFBundleVersion" ./MyApp-Info.plist`
</span><span class='line'>shortVersion=`/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "./MyApp-Info.plist"`
</span><span class='line'>ipaFileName="MyApp_v"${shortVersion}"_build"${version}"_"${buildDate}".ipa"
</span><span class='line'>
</span><span class='line'>curl --form "reporter=@./build/Release-iphoneos/"${ipaFileName} http://host/cgi-bin/up.cgi</span></code></pre></td></tr></table></div></figure>


<h2>构建后操作</h2>

<p>增加设置构建完成后进行的步骤，可发布测试报告、邮件通知等。</p>

<h1>参考</h1>

<ul>
<li><a href="http://jenkins-ci.org/">Jenkins homepage</a></li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Standard+Security+Setup">Jenkins Standard Security Setup</a></li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Disable+security">Jenkins Disable security</a></li>
<li><a href="http://damien.co/general/how-to-start-stop-restart-or-reload-jenkins-mac-osx-8022">HOW TO: Start, Stop, Restart or Reload Jenkins – Mac OSx</a></li>
<li><a href="http://webfrogs.me/2013/12/31/jenkins-ios-ci/">使用Jenkins搭建iOS开发的CI服务器</a></li>
<li><a href="http://code-dojo.blogspot.co.uk/2012/09/fix-ios-code-signing-issue-when-using.html">Fix the iOS code signing issue when using Jenkins</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCMock]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/06/09/ocmock/"/>
    <updated>2014-06-09T09:47:57+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/06/09/ocmock</id>
    <content type="html"><![CDATA[<p>在面向对象的系统中，所有的对象之间都有一定的联系。在单元测试中，当需要对某一个对象进行测试时，其可能依赖其他对象的返回值或者调用
其他对象的某些方法。其依赖的对象有可能行为不确定或者很难触发(各种错误场景)或者该对象还不存在。这种情况下需要使用<code>Mock Object</code>来模拟
依赖对象的行为，返回特定的值、实现特定的方法，来保证对测试对象的单元测试能有个可预期的结果来判断单元测试是否通过。</p>

<h1>OCMock</h1>

<p><code>OCMock</code>是个mock object的Objective-C实现，其使用Objective-C的动态特性可以快速创建mock object,并且使用Objective-C方法调用的语法来定义<code>expectations</code>和<code>stubs</code>。</p>

<p><code>OCMock</code>提供了三种mock功能</p>

<ul>
<li><code>stub</code>(桩) :对特定的方法返回预定义的值。</li>
<li><code>dynamic mock</code>(动态Mock):验证某个方法是否被调用。</li>
<li><code>partial mock</code>(部分Mock):重写已存在对象的方法。</li>
</ul>


<h2>添加OCMock框架</h2>

<ol>
<li><p>在<a href="http://ocmock.org/download/">下载页面</a>下载预编译的dmg文件,在其中的iOS目录下包含静态库<code>libOCMock.a</code>和<code>OCMock</code>头文件目录。
也可从GitHub <a href="https://github.com/erikdoe/ocmock">https://github.com/erikdoe/ocmock</a>下载源码自行编译。</p></li>
<li><p>在单元测试目录下，建立如下目录结构，并添加到项目中。</p></li>
</ol>


<p>  <img src="http://xuguoxing.github.io/images/2014/06/ocmockfile.png" width="668" height="404"></p>

<ul>
<li><p>在测试Target的<code>Build Phases-&gt;Link Binary With Libraries</code>中应该会自动包含<code>libOCMock.a</code>库，若没有，需手动添加一下。</p></li>
<li><p>头文件搜索路径设置,在测试Target的<code>Build Settings-&gt;Search Paths-&gt;Header Search Paths</code>中添加路径<code>$(PROJECT_DIR)/NeteaseLotteryTests/usr/include</code></p></li>
<li><p>link设置,测试Target的<code>Build Settings-&gt;Linking-&gt;Other Linker Flags</code>设置<code>-Objc</code>,<code>-force_load $(PROJECT_DIR)/NeteaseLotteryTests/usr/lib/libOCMock.a</code></p></li>
</ul>


<h2>创建Mock对象</h2>

<p><code>OCMockObject</code>类有几个工厂方法创建mock对象</p>

<ul>
<li><code>+mockForClass:</code>  基于给定类创建mock对象</li>
<li><code>+mockForProtocol:</code> 基于给定协议创建mock对象</li>
<li><code>+niceMockForClass:</code> 基于给定类创建&#8221;nice&#8221;mock对象</li>
<li><code>+niceMockForProtocol:</code> 基于给定协议创建&#8221;nice&#8221;mock对象</li>
<li><code>+partialMockForObject:</code> 基于给定对象创建&#8221;partical&#8221;mock对象</li>
<li><code>+observerMock:</code> 创建通知观察者(notification observer)mock对象</li>
</ul>


<p>三种mock对象类型</p>

<ol>
<li><p>普通mock对象</p>

<p>使用<code>+mockForClass:</code>、<code>+mockForProtocol:</code>创建的mock对象在接收到未定义的方法调用时产生<code>NSException</code>异常。</p></li>
<li><p>nick mock对象</p>

<p>使用<code>+niceMockForClass:</code>、<code>+niceMockForProtocol:</code>创建的mock对象在接收到未定义的方法调用时简单忽略。</p></li>
<li><p>partical mock对象</p>

<p>partical mock对象基于一个真实对象，而不是一个类或协议,其将一个已存在对象转换成mock,可重写其中的方法。</p></li>
</ol>


<h2>Mock使用方法</h2>

<p><a href="http://ocmock.org/tutorials/">OCMock Tutorials</a></p>

<h3>stub</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id jalopy = [OCMock mockForClass[Car class]];
</span><span class='line'>[[[jalopy stub] andReturn:@"75kph"] goFaster:[OCMArg any] units:@"kph"];
</span><span class='line'>[[[[jalopy stub] classMethod] andReturn:@"expired"] checkWarrany];</span></code></pre></td></tr></table></div></figure>


<h3>expect</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id niceMockThing = [OCMock niceMockForClass[Thing class]];
</span><span class='line'>[[niceMockThing expect] greeting:@"hello"];
</span><span class='line'>
</span><span class='line'>// verify the method was called as expected
</span><span class='line'>[niceMocking verify];</span></code></pre></td></tr></table></div></figure>


<h3>参数(<code>OCMArg</code>)</h3>

<ul>
<li><code>+any</code> 任意参数</li>
<li><code>+anyPointer</code> 任意指针参数</li>
<li><code>+isNil</code>  nil参数</li>
<li><code>+isNotNil</code> 非nil参数</li>
<li><code>+isNotEqual:</code> 不与某个对象相等的参数</li>
<li><code>+checkWithSelector:onObject:</code>  使用指定的target/action对检查通过的参数</li>
<li><code>+checkWithBlock:</code> 使用block检查通过的参数</li>
</ul>


<h3>返回值</h3>

<p>使用<code>-expect</code>或<code>-stub</code>返回的对象可使用下列方法设置返回值或者执行某种行为</p>

<ul>
<li><code>-andReturn:</code> 返回指定对象</li>
<li><code>-andReturnValue:</code> 返回指定值(NSValue)</li>
<li><code>-andThrow:</code> 抛出指定异常</li>
<li><code>-andPost:</code>  post指定通知</li>
<li><code>-andCall:onObject:</code> 在指定object上调用指定selector</li>
<li><code>-andDo:</code> 调用指定block</li>
</ul>


<p>可以指定<code>-andDo:</code>对block回调进行模拟,假设有这样的一个方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)downloadWeatherDataForZip:(NSString *)zip
</span><span class='line'>              callback:(void (^)(NSDictionary *response))callback;</span></code></pre></td></tr></table></div></figure>


<p>则使用以下方法进行模拟</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 1. stub using OCMock andDo: operator.
</span><span class='line'>
</span><span class='line'>[[[groupModelMock stub] andDo:^(NSInvocation *invoke) {
</span><span class='line'>        //2. declare a block with same signature
</span><span class='line'>        void (^weatherStubResponse)(NSDictionary *dict);
</span><span class='line'>
</span><span class='line'>        //3. link argument 3 with with our block callback
</span><span class='line'>        [invoke getArgument:&weatherStubResponse atIndex:3];
</span><span class='line'>
</span><span class='line'>        //4. invoke block with pre-defined input
</span><span class='line'>        NSDictionary *testResponse = @{@"high": 43 , @"low": 12};
</span><span class='line'>        weatherStubResponse(groupMemberMock);
</span><span class='line'>
</span><span class='line'>    }]downloadWeatherDataForZip@"80304" callback:[OCMArg any] ];</span></code></pre></td></tr></table></div></figure>


<p>andDo中的<code>invoke</code>参数即模拟的方法调用本身，使用<code>getArgument:atIndex:</code>可读取方法调用的参数，
对于本例，第四个参数((索引3))即为callback参数(前两个参数分别为<code>self</code>和<code>_cmd</code>),执行callback实参，传递预定义的参数即可。</p>

<h1>依赖注入（Dependency Injection）</h1>

<p>依赖注入是一种软件设计模式，使某一模块所依赖的其他模块或服务，在该模块创建时以注入的方式引入。</p>

<p>在单元测试中需要使用此模式设计类，以方便使用Mock对象来替换待测试对象所依赖的其他对象。</p>

<p>举例:</p>

<p>某类内部需要使用<code>NSNotificationCenter</code>，原始做法是直接使用<code>NSNotificationCenter defaultCenter</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@implementation ExampleObject : NSObject
</span><span class='line'>-(void)postNotification
</span><span class='line'>{
</span><span class='line'>    [[NSNotificationCenter defaultCenter] postNotificationName:@"SomethingCompletedNotification" object:self userInfo:userInfo];
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>在做单元测试时，我们只需要知道<code>ExampleObject</code>对象的<code>-postNotification</code>方法确实调用了<code>NSNotificationCenter</code>的<code>postNotificationName:</code>方法，
并不需要实际去发送通知，实际发送通知会引起其他模块的反应，不是此单元测试的目的。</p>

<p>所以我们需要使用<code>NSNotificationCenter</code>的mock对象来代替真实的<code>NSNotificationCenter</code>对象；而上面的方法无法进行mock，需要进行重构。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@interface ExampleObject : NSObject
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@property (nonatomic, readonly) NSNotificationCenter *notificationCenter;
</span><span class='line'>
</span><span class='line'>- (instancetype)initWithNotificationCenter:(NSNotificationCenter *)center;
</span><span class='line'>    //...
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@interface BNRCodeHostFetcher ()
</span><span class='line'>
</span><span class='line'>@property (nonatomic, strong, readwrite) NSNotificationCenter *notificationCenter;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation ExampleObject : NSObject
</span><span class='line'>
</span><span class='line'>- (instancetype)initWithNotificationCenter:(NSNotificationCenter *)center
</span><span class='line'>{
</span><span class='line'>  self = [super init];
</span><span class='line'>  if (self)
</span><span class='line'>  {
</span><span class='line'>      self.notificationCenter = center;
</span><span class='line'>  }
</span><span class='line'>  return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (instancetype)init
</span><span class='line'>{
</span><span class='line'>    return [self initWithNotificationCenter:[NSNotificationCenter defaultCenter]];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void)postNotification
</span><span class='line'>{
</span><span class='line'>    [[self notificationCenter] postNotificationName:@"SomethingCompletedNotification" object:self userInfo:userInfo];
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>这样，在正常使用时我们可以直接使用<code>-init</code>方法，会传递系统的<code>NSNotificationCenter</code>对象；在做单元测试时，可以使用<code>-initWithNotificationCenter:</code>
方法传递mock的<code>NSNotificationCenter</code>对象作为参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id notificationCenter = [OCMock mockForClass[NSNotificationCenter class]];
</span><span class='line'>[[notificationCenter expect] postNotificationName:[OCMArg any] object:[OCMArg any] userInfo:[OCMArg any]];
</span><span class='line'>
</span><span class='line'>ExampleObject *exampleObject = [[ExampleObject alloc]initWithNotificationCenter:notificationCenter];
</span><span class='line'>[exampleObject postNotification];
</span><span class='line'>[notificationCenter verify];
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Mock_object">Mock object</a></li>
<li><a href="http://ocmock.org/">OCMock</a></li>
<li><a href="http://ocmock.org/tutorials/">OCMock Tutorials</a></li>
<li><a href="http://www.bignerdranch.com/blog/making-mockery-mock-objects/">Making a Mockery with Mock Objects</a></li>
<li><a href="http://hackazach.net/code/2014/03/03/effective-testing-with-ocmock/">OCMock Test Origami</a></li>
<li><a href="http://alexvollmer.com/posts/2010/06/28/making-fun-of-things-with-ocmock/">Making Fun of Things with OCMock</a></li>
<li><a href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency injection</a></li>
<li><a href="http://www.bignerdranch.com/blog/dependency-injection-ios/">Dependency Injection, iOS and You</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCTest]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/05/23/xctest/"/>
    <updated>2014-05-23T10:19:20+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/05/23/xctest</id>
    <content type="html"><![CDATA[<p><code>XCTest</code>是Xcode5引入的单元测试框架，替换了之前的<code>OCUnit</code>。<code>XCTest</code>中的测试用例类都继承自<code>XCTestCase</code>类，断言前缀为<code>XCT</code>。</p>

<h1>项目中引入<code>XCTest</code>框架</h1>

<h2>创建新项目</h2>

<p>使用Xcode5新建项目，会自动创建名为<code>[ProjectName]Tests</code>的<code>Target</code>,
自动生成<code>[ProjectName]Tests</code>目录，且包含一个测试失败的单元测试文件<code>[ProjectName]Tests.m</code>。</p>

<h2>老项目中引入</h2>

<p>在Xcode中选择菜单<code>File-&gt;New-&gt;Target...</code>,在弹出框中选择<code>iOS-&gt;Other-&gt;Cocoa Touch Unit Testing Bundle</code>,在弹出的设置页面中
可根据需要修改，其中<code>Product Name</code>中的默认值为<code>[ProjectName] Tests</code>,中间包含一空格，推荐将空格去掉；其他项保持原状即可。</p>

<p><img src="http://xuguoxing.github.io/images/2014/05/XCTest_newTarget.png"></p>

<p>注:
* XCTest框架在运行时自动注入(Inject) app的target，访问其中的符号信息(symbols),
所以在XCTest Target的<code>Compile Sources</code>中只需要包含测试用例文件，不需要包含待测试的源文件。
* 若运行单元测试时有找不到符号的提示，检查下app Target <code>Build Settings</code>中的<code>Symbols hidden by default</code>,应该设为<code>NO</code>。</p>

<h1>运行单元测试</h1>

<ol>
<li>菜单<code>Product-&gt;Test</code>或者<code>Command+U</code>可运行全部测试用例。</li>
<li>在Xcode5的导航区有<code>Test Navigator</code>,在其中可选择运行整个bundle的测试方法、运行某个测试类或运行某一个测试方法。</li>
<li>使用<code>xcodebuild test</code>命令运行。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild test -scheme XCTestDemo -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone Retina (4-inch),OS=7.1'</span></code></pre></td></tr></table></div></figure>


<p>注: <code>XCTest</code>只能在iOS7以上的模拟器或设备中运行,所以在使用方法1、2时，Xcode中的指定的运行设备需为7.0以上的；而使用<code>xcodebuild test</code>
命令运行时需指定<code>destination</code>参数，选择7.0以上的模拟器或真实设备运行。否则会有错误提示:
&ldquo;Library not loaded: /Developer/Library/Frameworks/XCTest.framework/XCTest&rdquo;</p>

<p>执行完测试用例后，执行通过的测试用例左侧会有<code>绿色对勾</code>图标，执行失败的测试用例左侧会有<code>红色x图标</code>，且执行失败的行会红色高亮显示。</p>

<p><img src="http://xuguoxing.github.io/images/2014/05/XCTest_Navigator.png"></p>

<h1><code>XCTestCase</code>类结构</h1>

<p>一个测试用例文件如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;XCTest/XCTest.h&gt;
</span><span class='line'>
</span><span class='line'>@interface XCTestDemoTests : XCTestCase
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation XCTestDemoTests
</span><span class='line'>
</span><span class='line'>+ (void)setUp
</span><span class='line'>{
</span><span class='line'>    NSLog(@"TestCase Class setUp");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (void)tearDown
</span><span class='line'>{
</span><span class='line'>    NSLog(@"TestCase Class tearDown");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)setUp
</span><span class='line'>{
</span><span class='line'>    [super setUp];
</span><span class='line'>
</span><span class='line'>    NSLog(@"TestCase SetUp");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)tearDown
</span><span class='line'>{
</span><span class='line'>    [super tearDown];
</span><span class='line'>    NSLog(@"TestCase tearDown");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)testExample1
</span><span class='line'>{
</span><span class='line'>    NSLog(@"testExample1");
</span><span class='line'>    XCTAssertTrue(1, @"testExample1");
</span><span class='line'>    //XCTFail(@"No implementation for \"%s\"", __PRETTY_FUNCTION__);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)testExample2
</span><span class='line'>{
</span><span class='line'>    NSLog(@"testExample2");
</span><span class='line'>    XCTAssertTrue(1, @"testExample1");
</span><span class='line'>    //XCTFail(@"No implementation for \"%s\"", __PRETTY_FUNCTION__);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>在<code>XCTestCase</code>类中包含类方法<code>+ (void)setUp</code>、<code>+ (void)tearDown</code>,实例方法<code>- (void)setUp</code>、<code>- (void)tearDown</code>以及多个测试方法。
这些方法的执行顺序为</p>

<ol>
<li><code>+ (void)setUp</code></li>
<li><code>- (void)setUp</code></li>
<li><code>- (void)testExample1</code></li>
<li><code>- (void)tearDown</code></li>
<li><code>- (void)setUp</code></li>
<li><code>- (void)testExample2</code></li>
<li><code>- (void)tearDown</code></li>
<li><code>+ (void)tearDown</code></li>
</ol>


<p>即<code>setup</code>类方法会在类创建的调用一次，类销毁的时候调用<code>tearDown</code>类方法，在每个测试方法执行之前调用<code>setUp</code>实例方法,测试方法执行之后调用
<code>tearDown</code>实例方法。</p>

<h1>断言</h1>

<p><code>XCTest</code>支持的断言有：</p>

<ul>
<li>XCTFail (format…)</li>
<li>XCTAssertNil (a1, format…)</li>
<li>XCTAssertNotNil (a1, format…)</li>
<li>XCTAssert (a1, format…)</li>
<li>XCTAssertTrue (a1, format…)</li>
<li>XCTAssertFalse (a1, format…)</li>
<li>XCTAssertEqualObjects (a1, a2, format…)</li>
<li>XCTAssertEquals (a1, a2, format…)</li>
<li>XCTAssertEqualsWithAccuracy (a1, a2, accuracy, format…)</li>
<li>XCTAssertThrows (expression, format…)</li>
<li>XCTAssertThrowsSpecific (expression, specificException, format…)</li>
<li>XCTAssertThrowsSpecificNamed (expression, specificException, exceptionName, format…)</li>
<li>XCTAssertNoThrow (expression, format…)</li>
<li>XCTAssertNoThrowSpecific (expression, specificException, format…)</li>
<li>XCTAssertNoThrowSpecificNamed (expression, specificExcepton, exceptionName, format…)</li>
</ul>


<p>具体可见<code>XCTestAssertions.h</code>文件</p>

<h1>异步单元测试</h1>

<p>正常情况下，单元测试方法执行完毕后立即返回，若测试的是异步任务，此时没有拿到异步任务的返回结果，测试就终止了。</p>

<p>测试异步任务时，需要注意两个方法:</p>

<ol>
<li>单元测试方法在异步任务完成前不能返回。</li>
<li>在Cocoa中需要使用<code>run loop</code>来处理网络和定时器，这样异步任务才能完成。</li>
</ol>


<p>解决方案:</p>

<ol>
<li>在调用异步任务后，使用<code>CFRunLoopRun()</code>启用<code>run loop</code>一直等待，且run loop去处理网络和定时器以完成异步任务。</li>
<li>在异步任务完成后，使用<code>CFRunLoopStop(CFRunLoopGetCurrent())</code>终止当前的<code>run loop</code>,以结束单元测试方法。</li>
</ol>


<p><code>CFRunLoopRun</code></p>

<blockquote><p>The current thread’s run loop runs in the default mode (see “Default Run Loop Mode”) until the run loop is stopped with CFRunLoopStop or all the sources and timers are removed from the default run loop mode.</p><p>Run loops can be run recursively. You can call CFRunLoopRun from within any run loop callout and create nested run loop activations on the current thread’s call stack.</p></blockquote>


<p><code>CFRunLoopStop</code></p>

<blockquote><p>This function forces rl to stop running and return control to the function that called CFRunLoopRun or CFRunLoopRunInMode for the current run loop activation. If the run loop is nested with a callout from one activation starting another activation running, only the innermost activation is exited.</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testAsyncTask
</span><span class='line'>{
</span><span class='line'>    [taskManager execAsyncTaskWithCompletion:^(NSError *error) {
</span><span class='line'>        XCTAssertNil(error, @"Error should be nil");
</span><span class='line'>         CFRunLoopStop(CFRunLoopGetCurrent());
</span><span class='line'>    }];
</span><span class='line'>    CFRunLoopRun();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>github上有两个开源库使用<code>NSRunLoop</code>对此方法进行了扩展，增加了超时等机制。</p>

<ul>
<li><a href="https://github.com/premosystems/XCAsyncTestCase">XCAsyncTestCase</a></li>
<li><a href="https://github.com/iheartradio/xctest-additions">xctest-additions</a></li>
</ul>


<h1>参考</h1>

<ul>
<li>iOS测试指南,作者:芈峮</li>
<li><a href="http://hackazach.net/code/2014/02/24/slim-xctest-targets/">Slim XCTest Targets</a></li>
<li><a href="http://mentalfaculty.tumblr.com/post/83814421929/unit-testing-asynchronous-cocoa">Unit Testing Asynchronous Cocoa</a></li>
<li><a href="https://developer.apple.com/legacy/library/documentation/DeveloperTools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">Xcode Unit Testing Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Info]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/04/24/app-info/"/>
    <updated>2014-04-24T14:47:06+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/04/24/app-info</id>
    <content type="html"><![CDATA[<h2>Device信息</h2>

<h3>硬件设备类型</h3>

<p>硬件类型字符串，格式为&#8221;iPhone5,1&#8221;、&#8221;iPod5,1&#8221;、&#8221;iPad3,2&#8221;、&#8221;x86_64&#8221;等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(NSString *)platform
</span><span class='line'>{
</span><span class='line'>    size_t size;
</span><span class='line'>    sysctlbyname("hw.machine", NULL, &size, NULL, 0);
</span><span class='line'>    char *machine = malloc(size);
</span><span class='line'>    sysctlbyname("hw.machine", machine, &size, NULL, 0);
</span><span class='line'>    NSString *platform = [NSString stringWithUTF8String:machine];
</span><span class='line'>    free(machine);
</span><span class='line'>    return platform;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(NSString *)platform{
</span><span class='line'>    struct utsname systemInfo;
</span><span class='line'>    uname(&systemInfo);
</span><span class='line'>    NSString *machine =  [NSString stringWithCString:systemInfo.machine
</span><span class='line'>                                            encoding:NSUTF8StringEncoding];
</span><span class='line'>    return machine;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>硬件类型和具体设备的对应关系见<a href="https://dl.dropboxusercontent.com/u/5927761/iOSDeviceModelMapping.plist">iOSDeviceModelMapping.plist</a>。</p>

<h3>MAC地址</h3>

<p>自<a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html">iOS7</a>后，
获取Mac地址总会返回&#8221;02:00:00:00:00:00&#8221;。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSString *) macaddress{
</span><span class='line'>
</span><span class='line'>    int                 mib[6];
</span><span class='line'>    size_t              len;
</span><span class='line'>    char                *buf;
</span><span class='line'>    unsigned char       *ptr;
</span><span class='line'>    struct if_msghdr    *ifm;
</span><span class='line'>    struct sockaddr_dl  *sdl;
</span><span class='line'>
</span><span class='line'>    mib[0] = CTL_NET;
</span><span class='line'>    mib[1] = AF_ROUTE;
</span><span class='line'>    mib[2] = 0;
</span><span class='line'>    mib[3] = AF_LINK;
</span><span class='line'>    mib[4] = NET_RT_IFLIST;
</span><span class='line'>
</span><span class='line'>    if ((mib[5] = if_nametoindex("en0")) == 0) {
</span><span class='line'>        printf("Error: if_nametoindex error\n");
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (sysctl(mib, 6, NULL, &len, NULL, 0) &lt; 0) {
</span><span class='line'>        printf("Error: sysctl, take 1\n");
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if ((buf = malloc(len)) == NULL) {
</span><span class='line'>        printf("Could not allocate memory. error!\n");
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (sysctl(mib, 6, buf, &len, NULL, 0) &lt; 0) {
</span><span class='line'>        printf("Error: sysctl, take 2");
</span><span class='line'>        free(buf);
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    ifm = (struct if_msghdr *)buf;
</span><span class='line'>    sdl = (struct sockaddr_dl *)(ifm + 1);
</span><span class='line'>    ptr = (unsigned char *)LLADDR(sdl);
</span><span class='line'>    NSString *outstring = [NSString stringWithFormat:@"%02X:%02X:%02X:%02X:%02X:%02X",
</span><span class='line'>                           *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
</span><span class='line'>    free(buf);
</span><span class='line'>
</span><span class='line'>    return outstring;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>操作系统名</h3>

<p>如&#8221;iPhone OS&#8221;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIDevice currentDevice] systemName];</span></code></pre></td></tr></table></div></figure>


<h3>操作系统版本号</h3>

<p>例如：7.1.1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIDevice currentDevice] systemVersion];</span></code></pre></td></tr></table></div></figure>


<h3>Model</h3>

<p>例如&#8221;iPhone&#8221;,&ldquo;iPod touch&rdquo;,&ldquo;iPhone Simulator&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIDevice currentDevice] model];</span></code></pre></td></tr></table></div></figure>


<h3>IDFV(Vendor ID)</h3>

<p>厂商ID,具体见<a href="http://iosapp.me/blog/2014/03/31/udid/">UDID</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[[UIDevice currentDevice] identifierForVendor] UUIDString];</span></code></pre></td></tr></table></div></figure>


<h3>设备方向(orientation)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIDeviceOrientation orientation = [[UIDevice currentDevice] orientation];</span></code></pre></td></tr></table></div></figure>


<p>注:<code>UIDeviceOrientation</code>与<code>UIInterfaceOrientation</code>定义有差别。</p>

<h3>物理内存</h3>

<p>获取设备物理内存大小,以字节为单位</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/sysctl.h&gt;
</span><span class='line'>
</span><span class='line'>- (uint64_t)physicalMemory
</span><span class='line'>{
</span><span class='line'>    size_t size = sizeof(uint64_t);
</span><span class='line'>    uint64_t physicalMemorySize;
</span><span class='line'>    int mib[2] = {CTL_HW, HW_MEMSIZE};
</span><span class='line'>    sysctl(mib, 2, &physicalMemorySize, &size, NULL, 0);
</span><span class='line'>    return physicalMemorySize;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>用户空间内存大小</h3>

<p>获取用户空间可用的内存大小(去除内核、Video等内存占用)，以字节为单位</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/sysctl.h&gt;
</span><span class='line'>- (uint64_t)userMemory
</span><span class='line'>{
</span><span class='line'>    size_t size = sizeof(uint64_t);
</span><span class='line'>    uint64_t userMemorySize;
</span><span class='line'>    int mib[2] = {CTL_HW, HW_USERMEM};
</span><span class='line'>    sysctl(mib, 2, &userMemorySize, &size, NULL, 0);
</span><span class='line'>    return userMemorySize;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>当前应用所占内存</h3>

<p>目前没有很好的方法获取App当前所占内存,有一种方法是使用<code>vm_statistics_data_t</code>获取虚拟内存信息，仅供参考
<a href="http://landonf.bikemonkey.org/code/iphone/Determining_Available_Memory.20081203.html">Determining Available Memory</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;mach/mach.h&gt;
</span><span class='line'>#import &lt;mach/mach_host.h&gt;
</span><span class='line'>
</span><span class='line'>static void print_free_memory () {
</span><span class='line'>    mach_port_t host_port;
</span><span class='line'>    mach_msg_type_number_t host_size;
</span><span class='line'>    vm_size_t pagesize;
</span><span class='line'>
</span><span class='line'>    host_port = mach_host_self();
</span><span class='line'>    host_size = sizeof(vm_statistics_data_t) / sizeof(integer_t);
</span><span class='line'>    host_page_size(host_port, &pagesize);
</span><span class='line'>
</span><span class='line'>    vm_statistics_data_t vm_stat;
</span><span class='line'>
</span><span class='line'>    if (host_statistics(host_port, HOST_VM_INFO, (host_info_t)&vm_stat, &host_size) != KERN_SUCCESS)
</span><span class='line'>        NSLog(@"Failed to fetch vm statistics");
</span><span class='line'>
</span><span class='line'>    /* Stats in bytes */
</span><span class='line'>    natural_t mem_used = (vm_stat.active_count +
</span><span class='line'>                          vm_stat.inactive_count +
</span><span class='line'>                          vm_stat.wire_count) * pagesize;
</span><span class='line'>    natural_t mem_free = vm_stat.free_count * pagesize;
</span><span class='line'>    natural_t mem_total = mem_used + mem_free;
</span><span class='line'>    NSLog(@"used: %u free: %u total: %u", mem_used, mem_free, mem_total);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/Split82/iOSMemoryBudgetTest">iOSMemoryBudgetTest</a>通过不断alloc内存来记录应用crash时总的内存分配量，
但记录的alloc的内存数量和使用上面方法获取的mem_used数据对不上。</p>

<h2>进程信息(NSProcessInfo)</h2>

<p><code>NSProcessInfo</code>中包含当前进程的信息,包括启动参数、环境变量、进程ID、进程名、操作系统名、操作系统版本、处理器个数、系统启动时间等。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSProcessInfo *processInfo = [NSProcessInfo processInfo];
</span><span class='line'>NSDictionary *environment = [processInfo environment];
</span><span class='line'>NSArray *arguments = [processInfo arguments];
</span><span class='line'>NSUInteger numcore = [processInfo processorCount];</span></code></pre></td></tr></table></div></figure>


<p>示例代码见<a href="https://github.com/markd2/SystemInfo">SystemInfo</a>。</p>

<h2>Application信息</h2>

<h3>当前应用状态(<code>UIApplicationState</code>)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [[UIApplication sharedApplication] applicationState];</span></code></pre></td></tr></table></div></figure>


<p><code>UIApplicationState</code>状态有:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum : NSInteger {
</span><span class='line'>   UIApplicationStateActive,
</span><span class='line'>   UIApplicationStateInactive,
</span><span class='line'>   UIApplicationStateBackground
</span><span class='line'>} UIApplicationState;</span></code></pre></td></tr></table></div></figure>


<h3>应用注册的推送类型(<code>UIRemoteNotificationType</code>)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIApplication sharedApplication] enabledRemoteNotificationTypes];</span></code></pre></td></tr></table></div></figure>


<p><code>UIRemoteNotificationType</code>定义的类型有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum : NSUInteger {
</span><span class='line'>   UIRemoteNotificationTypeNone    = 0,
</span><span class='line'>   UIRemoteNotificationTypeBadge   = 1 &lt;&lt; 0,
</span><span class='line'>   UIRemoteNotificationTypeSound   = 1 &lt;&lt; 1,
</span><span class='line'>   UIRemoteNotificationTypeAlert   = 1 &lt;&lt; 2,
</span><span class='line'>   UIRemoteNotificationTypeNewsstandContentAvailability = 1 &lt;&lt; 3
</span><span class='line'>} UIRemoteNotificationType;</span></code></pre></td></tr></table></div></figure>


<h2>Screen信息</h2>

<h3>分辨率scale</h3>

<p>1.0为普通分辨率，2.0为2倍分辨率，即为Retina屏幕</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIScreen mainScreen] scale];</span></code></pre></td></tr></table></div></figure>


<h2>Bundle信息</h2>

<h3>发布版本号(Version/ Bundle versions string, short)</h3>

<p>一般格式为三段.分隔的整数，如3.24.1等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];</span></code></pre></td></tr></table></div></figure>


<p>使用NSString的<code>compare</code>方法，指定<code>NSNumbericSearch</code>选项，可比较版本号</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(BOOL)version:(NSString*)_oldver lessthan:(NSString*)_newver
</span><span class='line'>{
</span><span class='line'>    if([_oldver compare:_newver options:NSNumericSearch] == NSOrderedAscending){
</span><span class='line'>        return YES;
</span><span class='line'>    }
</span><span class='line'>    return NO;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>内部版本号(build/Bundle version)</h3>

<p>内部构建版本号，格式也一般为三段.分隔的整数，也可以使用单一整数递增</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString *)kCFBundleVersionKey];</span></code></pre></td></tr></table></div></figure>


<p><code>kCFBundleVersionKey</code>定义即为字符串&#8221;CFBundleVersion&#8221;</p>

<h3>Bundle identifier</h3>

<p>每个应用的唯一bundle id</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString *)kCFBundleIdentifierKey];</span></code></pre></td></tr></table></div></figure>


<p><code>kCFBundleIdentifierKey</code>定义为&#8221;CFBundleIdentifier&#8221;</p>

<h2>其他</h2>

<h3>广告ID(IDFA)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://github.com/erica/uidevice-extension/">uidevice-extension</a></li>
<li><a href="http://iosapp.me/blog/2014/03/31/udid/">UDID</a></li>
<li><a href="http://gamesfromwithin.com/whered-that-memory-go">Where’d That Memory Go?</a></li>
<li><a href="http://landonf.bikemonkey.org/code/iphone/Determining_Available_Memory.20081203.html">iPhone: Determining Available Memory</a></li>
<li><a href="https://forrst.com/posts/Get_current_Memory_usage-hzw">Get current Memory usage</a></li>
<li><a href="https://github.com/Split82/iOSMemoryBudgetTest">iOSMemoryBudgetTest</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html">Information Property List Key Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFBundleRef/Reference/reference.html">CFBundle Reference</a></li>
<li><a href="http://www.bignerdranch.com/blog/we-want-information-information/">We want information&hellip; Information&hellip;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UDID]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/03/31/udid/"/>
    <updated>2014-03-31T15:58:49+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/03/31/udid</id>
    <content type="html"><![CDATA[<p>用于标识iOS设备的各种方法。</p>

<h3>UDID(Unique Device Identifier)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIDevice CurrentDevice] uniqueIdentifier];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UDID是可以唯一标识iOS设备的由40个16进制字符组成的序列。</li>
<li>Available in iOS 2.0 &ndash; iOS 6.1；Deprecated in iOS 5.0.</li>
<li>自<a href="https://developer.apple.com/news/?id=3212013a">2013.5.1</a>起，App Store不允许访问<code>UDID</code>的新应用提交。</li>
</ul>


<h3>IDFV(identifierForVendor) 开发商ID</h3>

<p>用于应用的开发商(Vendor)唯一标识一台设备的ID。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSUUID *vendorId = [[UIDevice CurrentDevice] identifierForVendor];</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The value of this property is the same for apps that come from the same vendor running on the same device. A different value is returned for apps on the same device that come from different vendors, and for apps on different devices regardless of vendor. Normally, the vendor is determined by data provided by the App Store. If the app was not installed from the app store (such as when the app is still in development), the vendor is determined based on the app’s bundle ID. The bundle ID is assumed to be in reverse-DNS format, and the first two components are used to generate a vendor ID. For example, com.example.app1 and com.example.app2 would appear to have the same vendor ID.</p><p>If the value is nil, wait and get the value again later. This happens, for example, after the device has been restarted but before the user has unlocked the device.</p><p>The value in this property remains the same while the app (or another app from the same vendor) is installed on the iOS device. The value changes when the user deletes all of that vendor’s apps from the device and subsequently reinstalls one or more of them. The value can also when installing test builds using Xcode or when installing an app on a device using ad-hoc distribution. Therefore, if your app stores the value of this property anywhere, you should gracefully handle situations where the identifier changes.</p></blockquote>


<ul>
<li>Available in iOS 6.0 and later.</li>
<li>对运行在同一台设备上的同一个开发商(Vendor)的所有App都返回同一个值。</li>
<li>对运行在同一台设备上的不同开发商(Vendor)的App返回不同的值。</li>
<li>对运行在不同设备上的App,不论开发商(Vendor)，都返回不同的值。</li>
<li>从AppStore上下载的App,Vendor信息由AppStore中的数据决定。</li>
<li>不是从AppStore上下载的应用(例如开发中的应用),Vendor信息由app的bundle ID决定;bundle ID的前两部分用于
生成vendor ID，例如com.example.app1和com.example.app2会返回相同的vendor ID。</li>
<li>设备重启后、解锁前,vendor ID可能返回nil。</li>
<li>当同一个vendor的任意一个App在设备上存在时，vendor ID保持不变。当用户删除此vendor的所有App后，然后再次安装时vendor ID会
发生变化。</li>
</ul>


<h3>IDFA(Identifier for Advertisers)</h3>

<p>用于广告统计的设备标识符。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSUUID *adId = [[ASIdentifierManager sharedManager] advertisingIdentifier];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Available in iOS 6.0 and later.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/AdSupport/Reference/ASIdentifierManager_Ref/ASIdentifierManager.html#//apple_ref/occ/instp/ASIdentifierManager/advertisingIdentifier">advertisingIdentifier</a>
是<code>AdSupport.framework</code>框架的一部分。</li>
<li><p>几种情况下IDFA会变化</p>

<ul>
<li>系统Reset(iOS7:Settings.app &ndash;> General &ndash;> Reset &ndash;> Reset All Content and Settings)</li>
<li><p>Reset Advertising Identifier(iOS7:Settings.app &ndash;> Privacy &ndash;> Advertising &ndash;> Reset Advertising Identifier)</p>

<p>Reset Advertising Identifier后，如果应用已经运行在后台，则返回应用后调用<code>advertisingIdentifier</code>并不会返回新的值，只有应用终止再启动才会返回新的值。</p></li>
</ul>
</li>
<li><p><code>Limit Ad Tracking</code>设为<code>ON</code>状态不影响<code>advertisingIdentifier</code>的访问.</p></li>
<li>访问了<code>advertisingIdentifier</code>但没有显示任何广告的App会被拒掉,见<a href="http://blog.tapstream.com/post/75322632058/apple-rejecting-apps-for-not-showing-ads">tapstream的blog</a>。</li>
</ul>


<h4>Limit Ad Tracking</h4>

<p>在<code>Settings.app -&gt; Privacy -&gt; Advertising</code>设置有一项<code>Limit Ad Tracking</code>,是否限制广告跟踪，目前这一选项没有实质性作用。
在开发文档中对<code>advertisingTrackingEnabled</code>这样描述</p>

<blockquote><p>Check the value of this property before performing any advertising tracking. If the value is NO, use the advertising identifier only for the following purposes: frequency capping, conversion events, estimating the number of unique users, security and fraud detection, and debugging.</p></blockquote>


<p><code>advertisingTrackingEnabled</code>为NO,即<code>Limit Ad Tracking</code>为&#8217;ON&#8217;状态；这只是设置一个标识告诉广告商(advertisers)不要使用
Advertising ID对用户进行针对性的广告匹配；但没有任何强制措施来保证这一点,对访问<code>advertisingIdentifier</code>也没有任何限制。</p>

<h3>Mac Address</h3>

<p>在iOS之前可以获取设备的Mac地址做个MD5作为设备的唯一标识，但自<a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html">iOS7</a>起，获取Mac Address总是返回&#8221;02:00:00:00:00:00&#8221;</p>

<blockquote><p>In iOS 7 and later, if you ask for the MAC address of an iOS device, the system returns the value02:00:00:00:00:00. If you need to identify the device, use the identifierForVendor property ofUIDevice instead. (Apps that need an identifier for their own advertising purposes should consider using the advertisingIdentifier property of ASIdentifierManager instead.)</p></blockquote>


<h3>UUID(Universally Unique Identifiers)</h3>

<p>UUID是可以在空间和时间范围内保证唯一性的128bit序列，由<a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>定义，微软的一个实现也叫做GUID(Globally Unique Identifier).</p>

<blockquote><p>UUIDs (Universally Unique Identifiers), also known as GUIDs (Globally Unique Identifiers) or IIDs (Interface Identifiers), are 128-bit values A UUID is made unique over both space and time by combining a value unique to the computer on which it was generated and a value representing the number of 100-nanosecond intervals since October 15, 1582 at 00:00:00.</p></blockquote>


<p>在iOS6中有<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUUID_Class/Reference/Reference.html">NSUUID</a>类来表示UUID,上面介绍的<code>identifierForVendor</code>和<code>advertisingIdentifier</code>返回值类型都是NSUUID。</p>

<p>也可以直接使用<code>NSUUID</code>生成一个新的UUID,使用<code>UUIDString</code>方法获取其字符串表示;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSUUID *uuid = [NSUUID UUID];
</span><span class='line'>NSString *uuidString = [uuid UUIDString];</span></code></pre></td></tr></table></div></figure>


<p><code>NSUUID</code>与Core Fundation的<a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFUUIDRef/Reference/reference.html#//apple_ref/c/tdef/CFUUIDRef">CFUUIDRef</a>不是toll-free bridged的，不能直接进行转换。
需要使用UUID string在<code>NSUUID</code>与<code>CFUUID</code>间中转。</p>

<p><code>CFUUID</code>可在iOS5及之前的版本使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CFUUIDRef uuid = CFUUIDCreate(NULL);
</span><span class='line'>NSString *UUID = CFUUIDCreateString(NULL, uuid);</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://github.com/ylechelle/OpenUDID">OpenUDID</a></h3>

<p>一个用于替换UDID的开源方案，<a href="http://blog.appsfire.com/udid-is-dead-openudid-is-deprecated-long-live-advertisingidentifier/">不推荐使用</a></p>

<h3><a href="https://github.com/crashlytics/secureudid">SecureUDID Deprecated</a></h3>

<p><a href="http://try.crashlytics.com/">Crashlytics</a>发布的开源沙盒UDID方案，现已<a href="http://www.secureudid.org/">废弃</a>。</p>

<h3>参考</h3>

<ul>
<li><a href="http://nshipster.com/uuid-udid-unique-identifier/">NSUUID CFUUIDRef UIDevice -unique​Identifier -identifier​For​Vendor</a></li>
<li><a href="http://oleb.net/blog/2012/09/udid-apis-in-ios-6/">UDID Replacement APIs in iOS 6</a></li>
<li><a href="http://www.doubleencore.com/2013/04/unique-identifiers/">The Developer’s Guide to Unique Identifiers</a></li>
<li><a href="http://oleb.net/blog/2011/09/how-to-replace-the-udid/">How to Replace the UDID</a></li>
<li><a href="http://www.doubleencore.com/2013/04/what-apples-limit-ad-tracking-feature-actually-means-to-users/">What Apple’s ‘Limit Ad Tracking’ Means to Users</a></li>
<li><a href="http://blog.tapstream.com/post/75322632058/apple-rejecting-apps-for-not-showing-ads">Apple Rejecting Apps For Not Showing Ads</a></li>
<li><a href="https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html">What&rsquo;s New in iOS7</a>
*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rvm]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/03/27/rvm/"/>
    <updated>2014-03-27T17:27:57+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/03/27/rvm</id>
    <content type="html"><![CDATA[<p><a href="https://rvm.io/">Ruby Version Manager(RVM)</a>是用于管理和切换多个版本ruby环境的命令行工具。</p>

<p>安装RVM</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<p>安装完成有提示:</p>

<pre><code>To start using RVM you need to run `source /Users/xuguoxing/.rvm/scripts/rvm`
in all your open shell windows, in rare cases you need to reopen all shell windows.
</code></pre>

<p>安装Ruby 1.9.3(Octopress使用)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/03/27/homebrew/"/>
    <updated>2014-03-27T17:13:23+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/03/27/homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://brew.sh/index.html">Homebrew</a>是OS X上的包管理器</p>

<p>安装Homebrew</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>使用Homebrew安装包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install wget</span></code></pre></td></tr></table></div></figure>


<p>Homebrew会将包安装到/usr/local下自己的目录中，然后在/usr/local/bin中创建符号链接指向实际的执行文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pwd
</span><span class='line'>/usr/local/Cellar
</span><span class='line'>$ ls
</span><span class='line'>openssl   wget
</span><span class='line'>$ pwd
</span><span class='line'>/usr/local/bin
</span><span class='line'>$ ls -l wget
</span><span class='line'>wget -&gt; ../Cellar/wget/1.15/bin/wget</span></code></pre></td></tr></table></div></figure>


<p>卸载Homebrew</p>

<p>使用以下脚本卸载</p>

<div><script src='https://gist.github.com/1173223.js'></script>
<noscript><pre><code>#!/bin/sh
# Just copy and paste the lines below (all at once, it won't work line by line!)
# MAKE SURE YOU ARE HAPPY WITH WHAT IT DOES FIRST! THERE IS NO WARRANTY!

function abort {
  echo &quot;$1&quot;
  exit 1
}

set -e

/usr/bin/which -s git || abort &quot;brew install git first!&quot;
test -d /usr/local/.git || abort &quot;brew update first!&quot;

cd `brew --prefix`
git checkout master
git ls-files -z | pbcopy
rm -rf Cellar
bin/brew prune
pbpaste | xargs -0 rm
rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions 
test -d Library/LinkedKegs &amp;&amp; rm -r Library/LinkedKegs
rmdir -p bin Library share/man/man1 2&gt; /dev/null
rm -rf .git
rm -rf ~/Library/Caches/Homebrew
rm -rf ~/Library/Logs/Homebrew
rm -rf /Library/Caches/Homebrew
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ImageOptim]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/03/27/imageoptim/"/>
    <updated>2014-03-27T09:40:59+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/03/27/imageoptim</id>
    <content type="html"><![CDATA[<h2><a href="http://imageoptim.com/">ImageOptim</a></h2>

<p>ImageOptim通过寻找最好的压缩参数和移除不必要的<code>comments</code>和<code>color profiles</code>来减少图片大小，提高加载速度。</p>

<p>ImageOptim可以处理PNG,JPEG和GIF动画。</p>

<p>ImageOptim无缝集成以下优化工具:</p>

<ul>
<li><a href="http://www.advsys.net/ken/util/pngout.htm">PNGOUT</a></li>
<li><a href="http://googledevelopers.blogspot.co.uk/2013/02/compress-data-more-densely-with-zopfli.html">Zopfli</a></li>
<li><a href="http://pmt.sourceforge.net/pngcrush/">Pngcrush</a></li>
<li><a href="http://advancemame.sourceforge.net/doc-advpng.html">AdvPNG</a></li>
<li><a href="http://optipng.sourceforge.net/">OptiPNG</a></li>
<li><a href="http://www.kokkonen.net/tjko/projects.html">JpegOptim</a></li>
<li>jpegrescan</li>
<li>jpegtran</li>
<li><a href="http://www.lcdf.org/gifsicle/">Gifsicle</a></li>
</ul>


<p>ImageOptim代码是开源的，其<a href="https://github.com/pornel/ImageOptim">源代码</a>在GitHub上。</p>

<p><a href="http://calendar.perfplanet.com/2010/png-that-works/">PNG that works</a>文章中解释了为什么ImageOptim移除gamma信息，和怎么在
保留透明度的情况下获取更小的png图片。</p>

<h2>Xcode内置的图片优化 <a href="http://pmt.sourceforge.net/pngcrush/index.html">pngcrush</a></h2>

<p>Xcode默认会将所有的PNG图片转换成一个非标准的iOS特定的PNG格式<a href="http://iphonedevwiki.net/index.php/CgBI_file_format">CgBI file format</a>。</p>

<p>这种格式使用<code>premultiplied BGRA</code>代替了<code>RGBA</code>颜色空间，会在<code>loading</code>阶段节省一点点转换时间，但完全不影响
图片渲染(Rendering)速度。</p>

<p>Xcode的这种转换有时会使图片增大，会抵消<code>ImageOptim</code>的优化。</p>

<p>可以在<code>Build Settings</code>中将<code>Compress PNG Files</code>设为<code>NO</code>来禁止这种转换。</p>

<p>Apple的PNG变体，在iOS外无法使用，也无法使用<code>Preview</code>工具查看，可以使用<code>pngcrush</code>工具进行逆向转换成正常的png图片。</p>

<p><code>pngcrush</code>在Xcode的安装目录中存在，路径类似为<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /Applications/Xcode.app/Contents/Developer\/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush \-revert-iphone-optimizations -q Local.png Local-standard.png</span></code></pre></td></tr></table></div></figure>


<p>可将Local.png 恢复成正常的Local-standard.png</p>

<h2><a href="http://pngmini.com/">Image Alpha</a></h2>

<p>ImageAlpha通过<a href="http://pngmini.com/lossypng.html">有损压缩</a>和转换为更有效率的<code>PNG8+alpha</code>格式，可以有效的减小24-bit
PNG文件(包括alpha透明度)的大小。其生成的图片兼容iOS,所有的浏览器设置IE6。</p>

<p>ImageAlpha通过使用最新的<a href="http://pngquant.org/">pngquant</a>,<a href="http://sourceforge.net/projects/pngnqs9/">pngnq-s9</a>和<code>alpha-channel-aware</code>的<a href="https://github.com/pornel/mediancut-posterizer">posterizer</a>
能达到比Adobe Fireworks中类似功能更好的图片质量。</p>

<p>ImageAlpha基于<a href="http://pngquant.org/">pngquant</a>,在<code>ImageAlpha.app/Contents/Resources</code>目录下会有<code>pngquant</code>执行文件，可以用于批量处理。<a href="http://jamiemason.github.io/ImageOptim-CLI/">ImageOptim-CLI</a>也会使用此文件。</p>

<p>ImageAlpha是开源的，其代码是python的。<a href="https://github.com/pornel/ImageAlpha">source code</a>在github上。</p>

<h2><a href="http://jpegmini.com/mac">JPEGmini for Mac</a></h2>

<p>JPEGmini Mac版本可以对JPEG图片最高进行5倍的压缩，并保持原始的质量和JPEG格式。</p>

<p>JPEGmini是收费软件,在appstore有一个免费版本<a href="http://itunes.apple.com/us/app/jpegmini-lite/id525742250?mt=12">JPEGmini Lite下载</a>，免费版本每天只能压缩20张图片。</p>

<h2><a href="https://github.com/JamieMason/ImageOptim-CLI">ImageOptim-CLI</a></h2>

<p>ImageOptim-CLI命令行工具使用<a href="http://imageoptim.com/">ImageOptim</a>,<a href="http://pngmini.com/">ImageAlpha</a>,<a href="http://jpegmini.com/mac">JPEGmini for Mac</a>
对图片进行批量优化。</p>

<p>从目前的<a href="http://jamiemason.github.io/ImageOptim-CLI/">benchmarks</a>可看出ImageOptim,ImageAlpha和JPEGmini的优化效果比其他替代品要好。</p>

<p>下载最新的zip包，解压并将ImageOptim-CLI的路径添加到$PATH中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl --output imageoptim-cli.zip https://codeload.github.com/JamieMason/ImageOptim-CLI/zip/1.7.11
</span><span class='line'>$ unzip imageoptim-cli.zip
</span><span class='line'>$ export PATH=$PATH:imageoptim-cli/bin</span></code></pre></td></tr></table></div></figure>


<p>使用方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Usage: imageOptim [options]
</span><span class='line'>
</span><span class='line'>  Options:
</span><span class='line'>
</span><span class='line'>  -d, --directory     directory of images to process
</span><span class='line'>  -a, --image-alpha   pre-process PNGs with ImageAlpha.app *
</span><span class='line'>  -j, --jpeg-mini     pre-process JPGs with JPEGmini.app **
</span><span class='line'>  -q, --quit          quit all apps when complete
</span><span class='line'>  -h, --help          display this usage information
</span><span class='line'>  -e, --examples      display some example commands and uses
</span><span class='line'>  -v, --version       display the version number
</span><span class='line'>
</span><span class='line'>*  http://pngmini.com
</span><span class='line'>** https://itunes.apple.com/us/app/jpegmini/id498944723</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-d</code>指定要优化的图片文件目录;</li>
<li><code>-a</code>,<code>-j</code>指定预先使用<code>ImageAlpha</code>优化PNG图片和使用<code>JPEGmini</code>优化JPEG图片，因为JPEGmini为收费的，如果没有
安装，不指定<code>-j</code>即可;</li>
</ul>


<p>一些示例命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>imageOptim --directory ~/Sites/Awesome # [options]
</span><span class='line'>find ~/Sites/Awesome -name '*.jpg' | imageOptim # [options]
</span><span class='line'>imageOptim --jpeg-mini --image-alpha --quit --directory path/to/images
</span><span class='line'>imageOptim -j -a -q -d path/to/images</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress建站流程]]></title>
    <link href="http://xuguoxing.github.io/blog/2014/03/20/octopressjian-zhan-liu-cheng/"/>
    <updated>2014-03-20T21:20:35+08:00</updated>
    <id>http://xuguoxing.github.io/blog/2014/03/20/octopressjian-zhan-liu-cheng</id>
    <content type="html"><![CDATA[<h2>一.设置Octopress</h2>

<h3>检查Ruby环境</h3>

<p>确保Ruby环境为1.9.3,若不是，则下载RVM,安装1.9.3版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ url -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>$ rvm install 1.9.3
</span><span class='line'>$ rvm use 1.9.3
</span><span class='line'>$ rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p>Clone Octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>$ cd octopress</span></code></pre></td></tr></table></div></figure>


<p>安装依赖(dependencies)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install bundler
</span><span class='line'>$ sudo bundle install</span></code></pre></td></tr></table></div></figure>


<p>安装默认主题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>二.部署到Github Pages</h2>

<h3>若本机无SSH Key,则生成Github SSH Key并上传</h3>

<p>生成SSH key</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa -C "your_email@example.com"
</span><span class='line'>$ ssh-add id_rsa</span></code></pre></td></tr></table></div></figure>


<p>添加SSH Key到GitHub</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pbcopy &lt; ~/.ssh/id_rsa.pub #拷贝到clipboard</span></code></pre></td></tr></table></div></figure>


<p>在github的<a href="https://github.com/settings">Account Settings</a>添加SSH Key</p>

<p>测试环境输出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -T git@github.com</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://github.com/repositories/new">创建Github Repository</a></h3>

<ul>
<li><p>创建名字格式为username.github.io,username必须为github的用户名。即xuguoxing.github.io</p></li>
<li><p>Initialize this repository with a README 项不勾选</p></li>
</ul>


<h3>设置 github pages</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>该命令会询问repo地址，并在_deploy目录下设置master branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>生成blog,拷贝生成的文件到_deploy/,添加到git,commit并push到master branch.
  等待大约10分钟</p>

<h3>source上传到Github</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'your message'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>三.新增Posts</h2>

<p>Blog Post需用存储到<code>source/_posts</code>目录中，命名需符合Jekyll的命名规范:<code>YYYY-MM-DD-post-title.markdown</code></p>

<p>Octopress提供rake task创建新的post，自动符合命名规范的文件，并包含yaml元数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["Zombie Ninjas Attack: A survivor's retrospective"]</span></code></pre></td></tr></table></div></figure>


<p>会生成文件<code>source/_posts/2011-07-03-zombie-ninjas-attack-a-survivors-retrospective.markdown</code>;url访问地址为<code>http://site.com/blog/2011/07/03/zombie-ninjas-attack-a-survivors-retrospective/index.html</code></p>

<p>生成的文件头部包含<a href="http://jekyllrb.com/docs/frontmatter/">yaml front matter</a>告诉Jekyll如何处理Posts和Pages</p>

<pre><code>---
layout: post
title: "Zombie Ninjas Attack: A survivor's retrospective"
date: 2011-07-03 5:59
comments: true
external-url:
categories:
---
</code></pre>

<p>可能存在的数据有</p>

<ul>
<li>layout:指定使用的layout文件(不带.Layout扩展名),Layout文件必须放置在_layouts目录下</li>
<li>title:标题</li>
<li>date: 发布日期</li>
<li>comments: true或false,是否允许评论</li>
<li>author: 对于多作者blog,可设置文章作者</li>
<li>published: true或false,是否发布，如果在写草稿，可设为false</li>
<li>external-url: 发布<a href="http://octopress.org/docs/blogging/linklog">linklog</a>样式post,填写指向的外部链接</li>
<li><p>categories:可设置单个category或者多个category,格式件下面</p>

<pre><code>  # One category
  categories: Sass

  # Multiple categories example 1
  categories: [CSS3, Sass, Media Queries]

  # Multiple categories example 2
  categories:
  - CSS3
  - Sass
  - Media Queries
</code></pre></li>
<li><p>permalink: 代替blog post中的<code>/year/month/day/title.html</code>作为最终url</p></li>
<li>tags: 文字的tag标注，用法和categories相同</li>
</ul>


<h2>四.新增Pages</h2>

<p>可以在blog source目录下的任意位置增加pages,对应的URL会指向对应路径，如<code>about.markdown</code>会生成链接<code>site.com/about.html</code>,<code>about/index.markdown</code>会生成链接<code>site.com/about/index.html</code></p>

<p>生成新pages的rake task为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page[super-awesome]
</span><span class='line'>rake new_page[super-awesome/page.html]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第一种方式生成markdown文件<code>/source/super-awesome/index.markdown</code></li>
<li>第二种方式生成html文件<code>/source/super-awesome/page.html</code></li>
</ul>


<p>生成markdown文件的yaml头样式为:</p>

<pre><code>---
layout: page
title: "Super Awesome"
date: 2011-07-03 5:59
comments: true
sharing: true
footer: true
---
</code></pre>

<p>和post很相似,但不包括<code>categories</code>, sharing和footer是做什么用的；如果不需要显示日期<code>date</code>可删除</p>

<h2>五.生成和预览</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate   # Generates posts and pages into the public directory
</span><span class='line'>rake watch      # Watches source/ and sass/ for changes and regenerates
</span><span class='line'>rake preview    # Watches, and mounts a webserver at http://localhost:4000</span></code></pre></td></tr></table></div></figure>


<p>使用<code>rake preview</code>可在本地<code>http://localhost:4000</code>预览生成效果。</p>

<h2>六.配置Octopress</h2>

<p>配置文件包括</p>

<pre><code>_config.yml       # Main config (Jekyll's settings)
Rakefile          # Configs for deployment
config.rb         # Compass config
config.ru         # Rack config
</code></pre>

<p>一般情况下只需要配置<code>_config.yml</code>;<code>Rakefile</code>是关于部署的,如果需要使用rsync同步,则需要设置;另外两个文件一般不用。</p>

<p>_config.yml配置包包括三部分</p>

<h3>Main Configs</h3>

<pre><code>url:                # For rewriting urls for RSS, etc
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
date_format:        # Format dates using Ruby's date strftime syntax
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
email:              # Email address for the RSS feed if you want it.
</code></pre>

<h3>Jekyll &amp; Plugins</h3>

<p>关于Jekyll和插件的配置，可参考<a href="https://github.com/mojombo/jekyll/wiki/Configuration">configuration docs</a></p>

<pre><code>root:               # Mapping for relative urls (default: /)
permalink:          # Permalink structure for blog posts
source:             # Directory for site source files
destination:        # Directory for generated site files
plugins:            # Directory for Jekyll plugins
code_dir:           # Directory for code snippets (for include_code plugin)
category_dir:       # Directory for generated blog category pages

pygments:           # Toggle python pygments syntax highlighting
paginate:           # Posts per page on the blog index
pagination_dir:     # Directory base for pagination URLs eg. /blog/page/2/
recent_posts:       # Number of recent posts to appear in the sidebar

default_asides:     # Configure what shows up in the sidebar and in what order
blog_index_asides:  # Optional sidebar config for blog index page
post_asides:        # Optional sidebar config for post layout
page_asides:        # Optional sidebar config for page layout
</code></pre>

<h3>第三方设置</h3>

<ul>
<li>Github &ndash; 在侧边栏列出 github repositories</li>
<li>Twitter &ndash; 设置twitter用户名(不带@),添加Twitter分享按钮</li>
<li>Google Plus One &ndash; Setup sharing for posts and pages on Google&rsquo;s plus one network.</li>
<li>Pinboard &ndash; Share your recent Pinboard bookmarks in the sidebar.</li>
<li>Delicious &ndash; Share your recent Delicious bookmarks in the sidebar.</li>
<li>Disqus Comments &ndash; Add your disqus short name to enable disqus comments on your site.</li>
<li>Google Analytics &ndash; 添加Google Analytics的tracking id分析页面访问.</li>
<li>Facebook &ndash; 添加Facebook like按钮</li>
</ul>


<p>Google Analytics的tracking id在Google Analytics页面的 管理->媒体资源->跟踪代码中可以找到</p>

<h2>七.设置自定义域名</h2>

<p>在<code>source</code>目录下，新建文件<code>CNAME</code>,将域名添加到此文件中。</p>

<p>可设置顶级域名，如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'iosapp.me' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>或者子域名</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'www.iosapp.me' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>只能设置一个定制域名,如果需要设置多个定制域名,则需要使用其他服务将域名重定向到github pages的域名</p>

<p>部署发布至master</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>使用DNSPod管理域名</p>

<p>新建<a href="https://www.dnspod.cn">DNSPod</a>账号，添加域名<code>iosapp.me</code>,在godaddy账号中将域名的DNS设置DNSPod的DNS， <code>f1g1ns1.dnspod.net</code>和<code>f1g1ns2.dnspod.net</code></p>

<ul>
<li><p>DNSPod DNS生效后,在其中添加A或者CNAME记录</p>

<ul>
<li><p>若第一步设置的顶级域名<code>iosapp.me</code>,则需要添加一条A记录，将<code>iosapp.me</code>指向固定IP地址，IP地址可通过dig命令获得</p>

<pre><code>  $ dig xuguoxing.github.io +nostats +nocomments +nocmd
  xuguoxing.github.io.    898 IN  CNAME           github.map.fastly.net.
  github.map.fastly.net.  8   IN  A   199.27.79.133
</code></pre></li>
<li>若第一步设置的子域名<code>www.iosapp.me</code>,则需要添加一条CNAME域名,将<code>www.iosapp.me</code>指向<code>xuguoxing.github.io</code></li>
</ul>
</li>
<li><p>待github设置域名和DNS解析都生效后，即可以通过<code>iosapp.me</code>或者<code>www.iosapp.me</code>访问blog;</p></li>
</ul>


<p>可通过dig命令查询解析流程:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dig iosapp.me +nostats +nocomments +nocmd</span></code></pre></td></tr></table></div></figure>


<h2>八.插件</h2>

<h3><a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>图片</h3>

<p>增加图片的语法为</p>

<pre><code>&lt;img class="[position]" src="http://xuguoxing.github.io/path/to/image" title="[width] [height] [title text [alt text]]" &gt;
</code></pre>

<p>其中<code>/path/to/image</code>可以为网上的图片URL,也可是是本站的图片；如果自己站点的图片，
通常放在source/images目录下，可以按照年和月建立两层目录，如2014/03。<code>rake generate</code>命令会自动生成博客，
放在<code>source/images</code>目录下的图片也会被复制过去。</p>

<p>图片代码示例</p>

<pre><code>&lt;img src="http://xuguoxing.github.io/images/2014/03/picture.jpg"&gt;
&lt;img src="http://placekitten.com/890/280"&gt;
&lt;img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" &gt;
&lt;img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" &gt;
&lt;img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten"&gt;
&lt;img src="http://placekitten.com/890/280"&gt;
</code></pre>

<p><img src="http://placekitten.com/890/280"></p>

<h3><a href="http://octopress.org/docs/plugins/blockquote/">Blockquote</a>引用</h3>

<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>


<p>从Twitter引用</p>

<blockquote><p>Over the past 24 hours I&#8217;ve been reflecting on my life & I&#8217;ve realized only one thing. I need a medieval battle axe.</p><footer><strong>@allanbranch</strong> <cite><a href='https://twitter.com/allanbranch/status/90766146063712256'>twitter.com/allanbranch/status/&hellip;</a></cite></footer></blockquote>


<p>从Web引用</p>

<blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong> <cite><a href='http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html'>Welcome to Island Marketing</a></cite></footer></blockquote>


<h3>代码块</h3>

<p>关于代码的引用参见</p>

<ul>
<li><a href="http://octopress.org/docs/plugins/codeblock/">Codeblock</a></li>
<li><a href="http://octopress.org/docs/plugins/backtick-codeblock/">Backtick Code Blocks</a></li>
<li><a href="http://octopress.org/docs/plugins/include-code/">Include Code</a></li>
<li><a href="http://octopress.org/docs/plugins/gist-tag/">Gist Tag</a></li>
</ul>


<h2>参考:</h2>

<ul>
<li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></li>
<li><a href="https://help.github.com/articles/generating-ssh-keys">GitHub Generating SSH Keys</a></li>
<li><a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></li>
<li><a href="http://octopress.org/docs/blogging/">Start blogging with Octopress</a></li>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a></li>
<li><a href="https://support.dnspod.cn/Kb/showarticle/tsid/42/">Godaddy注册商域名修改DNS地址</a></li>
<li><a href="http://octopress.org/docs/blogging/plugins/">Plugins</a></li>
<li><a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a></li>
<li><a href="http://octopress.org/docs/plugins/blockquote/">Blockquote</a></li>
<li><a href="http://octopress.org/docs/plugins/codeblock/">Codeblock</a></li>
<li><a href="http://octopress.org/docs/plugins/backtick-codeblock/">Backtick Code Blocks</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
